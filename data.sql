/*
 Navicat Premium Data Transfer

 Source Server         : 111
 Source Server Type    : MySQL
 Source Server Version : 50622
 Source Host           : localhost:3306
 Source Schema         : myframe

 Target Server Type    : MySQL
 Target Server Version : 50622
 File Encoding         : 65001

 Date: 14/06/2022 09:50:58
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for cms_article
-- ----------------------------
DROP TABLE IF EXISTS `cms_article`;
CREATE TABLE `cms_article`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `cid` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '栏目ID',
  `title` varchar(80) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '标题',
  `author` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '作者',
  `image` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '封面图',
  `show` tinyint(4) NOT NULL DEFAULT 0 COMMENT '是否发布',
  `views` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '阅读量',
  `content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '内容',
  `created_at` timestamp(0) NULL DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 13 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of cms_article
-- ----------------------------
INSERT INTO `cms_article` VALUES (2, 2, 'PHP微信公众平台开发', 'admin', '2019-11/21/ed27a1ba3b93801cde7a4d0f2ff26958.png', 1, 8, '<div id=\"content_views\" class=\"htmledit_views\">\r\n                    <p>6个实用的Python自动化脚本详解</p>\r\n<p></p>\r\n<p><span style=\"color:#4da8ee;\">每天你都可能会执行许多重复的任务，例如阅读 pdf、播放音乐、查看天气、打开书签、清理文件夹等等，使用自动化脚本，就无需手动一次又一次地完成这些任务，非常方便。快跟随小编一起试一试吧</span><br> 每天你都可能会执行许多重复的任务，例如阅读 pdf、播放音乐、查看天气、打开书签、清理文件夹等等，使用自动化脚本，就无需手动一次又一次地完成这些任务，非常方便。而在某种程度上，Python 就是自动化的代名词。今天分享 6 个非常有用的 Python 自动化脚本。</p>\r\n<p><strong>1、将 PDF 转换为音频文件</strong><br> 脚本可以将 pdf 转换为音频文件，原理也很简单，首先用 PyPDF 提取 pdf 中的文本，然后用 Pyttsx3 将文本转语音。关于文本转语音，你还可以看这篇文章FastAPI：快速开发一个文本转语音的接口。</p>\r\n<p>代码如下：</p>\r\n<pre><code class=\"hljs language-python\"><ol class=\"hljs-ln\" style=\"width:100%\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> pyttsx3,PyPDF2&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">pdfreader = PyPDF2.PdfFileReader(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\"></span>,<span class=\"hljs-string\"></span>))&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">speaker = pyttsx3.init()&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">for</span> page_num <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(pdfreader.numPages): &nbsp; &nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; text = pdfreader.getPage(page_num).extractText() &nbsp;<span class=\"hljs-comment\">## extracting text from the PDF&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; cleaned_text = text.strip().replace(<span class=\"hljs-string\"></span>,<span class=\"hljs-string\"></span>) &nbsp;<span class=\"hljs-comment\">## Removes unnecessary spaces and break lines&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; <span class=\"hljs-built_in\">print</span>(cleaned_text) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class=\"hljs-comment\">## Print the text from PDF&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; <span class=\"hljs-comment\">#speaker.say(cleaned_text) &nbsp; &nbsp; &nbsp; &nbsp;## Let The Speaker Speak The Text&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; speaker.save_to_file(cleaned_text,<span class=\"hljs-string\"></span>) &nbsp;<span class=\"hljs-comment\"></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; speaker.runAndWait()&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">speaker.stop()&nbsp;</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre>\r\n<p><br><strong>2、从列表中播放随机音乐</strong><br> 这个脚本会从歌曲文件夹中随机选择一首歌进行播放，需要注意的是 os.startfile 仅支持 Windows 系统。</p>\r\n<pre><code class=\"hljs language-lua\"><ol class=\"hljs-ln\" style=\"width:100%\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">import <span class=\"hljs-built_in\">random</span>, <span class=\"hljs-built_in\">os</span>&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">music_dir = <span class=\"hljs-string\"></span>&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">songs = <span class=\"hljs-built_in\">os</span>.listdir(music_dir)&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">song = <span class=\"hljs-built_in\">random</span>.randint(<span class=\"hljs-number\">0</span>,<span class=\"hljs-built_in\">len</span>(songs))&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-built_in\">print</span>(songs[song]) &nbsp;## Prints The Song Name&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-built_in\">os</span>.startfile(<span class=\"hljs-built_in\">os</span>.<span class=\"hljs-built_in\">path</span>.join(music_dir, songs[<span class=\"hljs-number\">0</span>])) &nbsp;</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre>\r\n<p><br><strong>3、不再有书签了</strong><br> 每天睡觉前，我都会在网上搜索一些好内容，第二天可以阅读。大多数时候，我把遇到的网站或文章添加为书签，但我的书签每天都在增加，以至于现在我的浏览器周围有100多个书签。因此，在python的帮助下，我想出了另一种方法来解决这个问题。现在，我把这些网站的链接复制粘贴到文本文件中，每天早上我都会运行脚本，在我的浏览器中再次打开所有这些网站。</p>\r\n<pre><code class=\"hljs language-python\"><ol class=\"hljs-ln\" style=\"width:100%\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> webbrowser&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\"></span>) <span class=\"hljs-keyword\">as</span> reader:&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> link <span class=\"hljs-keyword\">in</span> reader:&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp; webbrowser.<span class=\"hljs-built_in\">open</span>(link.strip())&nbsp;</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre>\r\n<p><br> 代码用到了 webbrowser，是 Python 中的一个库，可以自动在默认浏览器中打开 URL。</p>\r\n<p>4、智能天气信息<br> 国家气象局网站提供获取天气预报的 API，直接返回 json 格式的天气数据。所以只需要从 json 里取出对应的字段就可以了。</p>\r\n<p>下面是指定城市(县、区)天气的网址，直接打开网址，就会返回对应城市的天气数据。比如：</p>\r\n<p>http://www.weather.com.cn/data/cityinfo/101021200.html上海徐汇区对应的天气网址。&nbsp;</p>\r\n<p>具体代码如下：</p>\r\n<p>i</p>\r\n<pre><code class=\"hljs language-python\"><ol class=\"hljs-ln\" style=\"width:100%\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">mport requests&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> json&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> logging <span class=\"hljs-keyword\">as</span> log&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_weather_wind</span>(<span class=\"hljs-params\">url</span>):&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; r = requests.get(url)&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> r.status_code != <span class=\"hljs-number\">200</span>:&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp; log.error(<span class=\"hljs-string\"></span>)&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; info = json.loads(r.content.decode())&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; <span class=\"hljs-comment\"># get wind data&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; data = info[<span class=\"hljs-string\"></span>]&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; WD = data[<span class=\"hljs-string\"></span>]&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; WS = data[<span class=\"hljs-string\"></span>]&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"{}({})\"</span>.<span class=\"hljs-built_in\">format</span>(WD, WS)&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"18\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_weather_city</span>(<span class=\"hljs-params\">url</span>):&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"19\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; <span class=\"hljs-comment\"># open url and get return data&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"20\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; r = requests.get(url)&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"21\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> r.status_code != <span class=\"hljs-number\">200</span>:&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"22\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp; log.error(<span class=\"hljs-string\"></span>)&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"23\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"24\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; <span class=\"hljs-comment\"># convert string to json&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"25\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; info = json.loads(r.content.decode())&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"26\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"27\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; <span class=\"hljs-comment\"># get useful data&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"28\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; data = info[<span class=\"hljs-string\"></span>]&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"29\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; city = data[<span class=\"hljs-string\"></span>]&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"30\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; temp1 = data[<span class=\"hljs-string\"></span>]&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"31\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; temp2 = data[<span class=\"hljs-string\"></span>]&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"32\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; weather = data[<span class=\"hljs-string\"></span>]&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"33\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"{} {} {}~{}\"</span>.<span class=\"hljs-built_in\">format</span>(city, weather, temp1, temp2)&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"34\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"35\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"36\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\"></span>:&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"37\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; msg = <span class=\"hljs-string\"><span class=\"hljs-string\">\"\"\"**天气提醒**: &nbsp;&nbsp;</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"38\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"39\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">{} {} &nbsp;&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"40\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">{} {} &nbsp;&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"41\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"42\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">来源: 国家气象局&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"43\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">\"\"\"</span>.<span class=\"hljs-built_in\">format</span>(&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"44\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; get_weather_city(<span class=\"hljs-string\"></span>),&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"45\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; get_weather_wind(<span class=\"hljs-string\"></span>),&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"46\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; get_weather_city(<span class=\"hljs-string\"></span>),&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"47\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; get_weather_wind(<span class=\"hljs-string\"></span>)&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"48\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">)&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"49\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; <span class=\"hljs-built_in\">print</span>(msg)&nbsp;</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre>\r\n<p><br> 运行结果如下所示：</p>\r\n<p></p>\r\n<p> </p>\r\n<p class=\"img-center\"><img alt=\"\" src=\"https://img-blog.csdnimg.cn/img_convert/c7073c6e794de7b67690b5762d129455.png\"></p>\r\n<p><strong>5、长网址变短网址</strong><br> 有时，那些大URL变得非常恼火，很难阅读和共享，此脚可以将长网址变为短网址。</p>\r\n<pre><code class=\"hljs language-python\"><ol class=\"hljs-ln\" style=\"width:100%\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> contextlib&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">from</span> urllib.parse <span class=\"hljs-keyword\">import</span> urlencode&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">from</span> urllib.request <span class=\"hljs-keyword\">import</span> urlopen&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> sys&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">make_tiny</span>(<span class=\"hljs-params\">url</span>):&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp;request_url = (<span class=\"hljs-string\"></span> + &nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp;urlencode({<span class=\"hljs-string\"></span>:url}))&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp;<span class=\"hljs-keyword\">with</span> contextlib.closing(urlopen(request_url)) <span class=\"hljs-keyword\">as</span> response:&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; <span class=\"hljs-keyword\">return</span> response.read().decode(<span class=\"hljs-string\"></span>)&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp;<span class=\"hljs-keyword\">for</span> tinyurl <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">map</span>(make_tiny, sys.argv[<span class=\"hljs-number\">1</span>:]):&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; <span class=\"hljs-built_in\">print</span>(tinyurl)&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\"></span>:&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp;main()&nbsp;</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre>\r\n<p><br> 这个脚本非常实用，比如说有不是内容平台是屏蔽公众号文章的，那么就可以把公众号文章的链接变为短链接，然后插入其中，就可以实现绕过</p>\r\n<p><strong>6、清理下载文件夹</strong><br> 世界上最混乱的事情之一是开发人员的下载文件夹，里面存放了很多杂乱无章的文件，此脚本将根据大小限制来清理您的下载文件夹，有限清理比较旧的文件：</p>\r\n<pre><code class=\"hljs language-python\"><ol class=\"hljs-ln\" style=\"width:100%\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> os&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> threading&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">import</span> time&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"4\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp;&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"5\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp;&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"6\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_file_list</span>(<span class=\"hljs-params\">file_path</span>):&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"7\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">#文件按最后修改时间排序&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"8\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; dir_list = os.listdir(file_path)&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"9\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> dir_list:&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"10\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">return</span>&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"11\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; <span class=\"hljs-keyword\">else</span>:&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"12\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp; dir_list = <span class=\"hljs-built_in\">sorted</span>(dir_list, key=<span class=\"hljs-keyword\">lambda</span> x: os.path.getmtime(os.path.join(file_path, x)))&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"13\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> dir_list&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"14\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp;&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"15\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_size</span>(<span class=\"hljs-params\">file_path</span>):&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"16\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; <span class=\"hljs-string\"><span class=\"hljs-string\">\"\"\"[summary]&nbsp;</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"17\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">&nbsp; &nbsp; Args:&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"18\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">&nbsp; &nbsp; &nbsp; &nbsp; file_path ([type]): [目录]&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"19\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"20\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">&nbsp; &nbsp; Returns:&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"21\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">&nbsp; &nbsp; &nbsp; &nbsp; [type]: 返回目录大小，MB&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"22\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">&nbsp; &nbsp; \"\"\"</span>&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"23\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; totalsize=<span class=\"hljs-number\">0</span>&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"24\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> filename <span class=\"hljs-keyword\">in</span> os.listdir(file_path):&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"25\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp; totalsize=totalsize+os.path.getsize(os.path.join(file_path, filename))&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"26\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; <span class=\"hljs-comment\">#print(totalsize / 1024 / 1024)&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"27\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; <span class=\"hljs-keyword\">return</span> totalsize / <span class=\"hljs-number\">1024</span> / <span class=\"hljs-number\">1024</span>&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"28\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp;&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"29\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">detect_file_size</span>(<span class=\"hljs-params\">file_path, size_Max, size_Del</span>):&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"30\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; <span class=\"hljs-string\"><span class=\"hljs-string\">\"\"\"[summary]&nbsp;</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"31\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">&nbsp; &nbsp; Args:&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"32\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">&nbsp; &nbsp; &nbsp; &nbsp; file_path ([type]): [文件目录]&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"33\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">&nbsp; &nbsp; &nbsp; &nbsp; size_Max ([type]): [文件夹最大大小]&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"34\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">&nbsp; &nbsp; &nbsp; &nbsp; size_Del ([type]): [超过size_Max时要删除的大小]&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"35\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-string\">&nbsp; &nbsp; \"\"\"</span>&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"36\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; <span class=\"hljs-built_in\">print</span>(get_size(file_path))&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"37\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> get_size(file_path) &gt; size_Max:&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"38\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp; fileList = get_file_list(file_path)&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"39\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-built_in\">len</span>(fileList)):&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"40\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-keyword\">if</span> get_size(file_path) &gt; (size_Max - size_Del):&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"41\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-built_in\">print</span> (<span class=\"hljs-string\">\"del :%d %s\"</span> % (i + <span class=\"hljs-number\">1</span>, fileList[i]))&nbsp;</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"42\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class=\"hljs-comment\">#os.remove(file_path + fileList[i])&nbsp;</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"43\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">&nbsp; &nbsp; &nbsp;</div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4259&quot;}\" onclick=\"hljs.copyCode(event)\"></div></pre>\r\n                </div>', '2022-06-05 19:25:26');
INSERT INTO `cms_article` VALUES (3, 1, 'PHP微信公众平台开发', 'admin', '', 1, 4, '<div id=\"article_content\" class=\"article_content clearfix\">\r\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-163de54645.css\">\r\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\r\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\r\n                    </svg>\r\n                    <p>事情是这样的：昨天晚上，女朋友让我十二点催她睡觉。<br> <img src=\"https://img-blog.csdnimg.cn/img_convert/496175887d7646cf1b29eb76917e0ca0.png#pic_center\" alt=\"图片\"><br> 不过，可是我实在太困了，熬不下去…… 是吧？女朋友哪有睡觉重要？<br> <img src=\"https://img-blog.csdnimg.cn/img_convert/2f584de3ead46aad7d13866ca3a5f7bd.png#pic_center\" alt=\"图片\"><br> 但，女朋友的命令，我是不敢违抗的……<br> <img src=\"https://img-blog.csdnimg.cn/img_convert/1aefac083b651aa4b2c00e0ff1d997c5.png#pic_center\" alt=\"图片\"><br> 但是睡觉也不能缺！</p>\r\n<p>这时候我们该怎么办呢？是时候让Python登场了！<strong>喜欢记得收藏、关注、点赞。</strong></p>\r\n<p><strong>完整版代码，文末获取</strong></p>\r\n<h1><a name=\"t0\"></a><a id=\"Python_12\"></a><strong>Python登场</strong></h1>\r\n<p>这次我们来做一个自动发送微信的程序，在深夜十二点的时候给女朋友发去消息，也算是尽了一个男朋友的义务了。</p>\r\n<h2><a name=\"t1\"></a><a id=\"_17\"></a>安装和导入</h2>\r\n<p>我们需要两个模块：apscheduler，<a href=\"https://so.csdn.net/so/search?q=pyautogui&amp;spm=1001.2101.3001.7020\" target=\"_blank\" class=\"hl hl-1\" data-report-view=\"{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=pyautogui&amp;spm=1001.2101.3001.7020&quot;}\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=pyautogui&amp;spm=1001.2101.3001.7020&quot;}\" data-tit=\"pyautogui\" data-pretit=\"pyautogui\">pyautogui</a></p>\r\n<p>快捷键 Windows+r 打开运行控制框，输入 cmd，进入命令行，输入：</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-bash has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">pip <span class=\"token function\">install</span> apscheduler\r\npip <span class=\"token function\">install</span> pyautogui\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li></ul></pre>\r\n<p>导入：</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\"><span class=\"token keyword\">import</span> pyautogui\r\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\r\n<span class=\"token keyword\">from</span> apscheduler<span class=\"token punctuation\">.</span>schedulers<span class=\"token punctuation\">.</span>blocking <span class=\"token keyword\">import</span> BlockingScheduler <span class=\"token comment\"># 阻塞当前进程的调度器</span>\r\n<span class=\"token comment\"># blocking类型调度器会阻塞当前进程，若你想要后台运行的调度器，可以使用以下代码：</span>\r\n<span class=\"token comment\"># from apscheduler.schedulers.background import BackgroundScheduler</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li></ul></pre>\r\n<h1><a name=\"t2\"></a><a id=\"pyautogui_39\"></a><strong>pyautogui</strong></h1>\r\n<p>首先我们来实现自动发送消息</p>\r\n<p>pyautogui 是一个非常强大的库，可以操作鼠标和键盘。我们将用它来完成自动操作电脑。</p>\r\n<p>先来做一些基本设置：</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">pyautogui<span class=\"token punctuation\">.</span>PAUSE <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 设置每一步操作的间隔（秒），可防止操作太快</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li></ul></pre>\r\n<p>然后我们登录微信，最小化。</p>\r\n<p>接下来我们把鼠标放到微信的任务栏图标上，运行以下语句，获取此时光标的坐标，返回一个Point对象：</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pyautogui<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 打印坐标，Point(x=148, y=879)</span>\r\nicon_position <span class=\"token operator\">=</span> pyautogui<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Point(x=148, y=879)</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li></ul></pre>\r\n<p>打开微信，选择女朋友的回话窗口，将鼠标放在输入框上，同样获取光标坐标，为了将焦点锁定到输入框以方便待会的输入。<br> <img src=\"https://img-blog.csdnimg.cn/img_convert/5a925bfb814fc9f64c3286d1b45e6c75.png\" alt=\"图片\"></p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>pyautogui<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 打印坐标，Point(x=174, y=751)</span>\r\nentry_position <span class=\"token operator\">=</span> pyautogui<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># Point(x=174, y=751)</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li></ul></pre>\r\n<p>接下来，控制程序依次点击这两个点：</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">pyautogui<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>icon_position<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 默认左键单击</span>\r\n<span class=\"token comment\"># pyautogui.click(148, 879)</span>\r\npyautogui<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>entry_position<span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># pyautogui.click(174, 751)</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li></ul></pre>\r\n<p>打开微信并锁定焦点后，我们开始输入文本。</p>\r\n<p>输入文本可以有两种方式：</p>\r\n<ul><li><code>pyautogui.typewrite([\'o\', \'n\', \'e\', \'enter\'])</code></li></ul>\r\n<p>在方法中传入一个列表，里面每一元素都是单个字母或特殊按键</p>\r\n<ul><li><code>pyautogui.typewrite(\'You can type multiple letters in this way\')</code></li></ul>\r\n<p>传入字符串，但不能同时打印字母和特殊按键。</p>\r\n<p>这两种方式都不能直接输入中文，所以只能依靠你的输入法来输入中文了。</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">pyautogui<span class=\"token punctuation\">.</span>typewrite<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\"></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\"></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\"></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\"></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\"></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\"></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\"></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 第一个参数是输入文本，第二个是输入每个字符的间隔时间</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li></ul></pre>\r\n<p>为了使我们的操作更加 人模狗样 像人的操作，我么来加上移动鼠标的代码：</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">pyautogui<span class=\"token punctuation\">.</span>moveTo<span class=\"token punctuation\">(</span>icon_position<span class=\"token punctuation\">,</span> duration<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># duration为执行时长，可选</span>\r\npyautogui<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>icon_position<span class=\"token punctuation\">)</span>\r\npyautogui<span class=\"token punctuation\">.</span>moveTo<span class=\"token punctuation\">(</span>entry_position<span class=\"token punctuation\">,</span> duration<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\r\npyautogui<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>entry_position<span class=\"token punctuation\">)</span>\r\npyautogui<span class=\"token punctuation\">.</span>typewrite<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\"></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\"></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\"></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\"></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\"></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token string\"></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\"></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 第二个参数为按下每一个字母的间隔，可选</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li></ul></pre>\r\n<p>看看效果：<br> <img src=\"https://img-blog.csdnimg.cn/img_convert/5520ca4069fb9b02609820cf452d8873.gif#pic_center\" alt=\"图片\"><br> 当然，若是你要输入的内容实在很多，又嫌麻烦，可以通过复制粘贴来实现：</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\"><span class=\"token keyword\">import</span> pyperclip\r\n\r\npyperclip<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token string\"></span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 复制</span>\r\npyautogui<span class=\"token punctuation\">.</span>hotkey<span class=\"token punctuation\">(</span><span class=\"token string\"></span><span class=\"token punctuation\">,</span> <span class=\"token string\"></span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 按下组合键的方法，ctrl+v粘贴</span>\r\npyautogui<span class=\"token punctuation\">.</span>press<span class=\"token punctuation\">(</span><span class=\"token string\"></span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 按下按键</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li></ul></pre>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4e1f86c951eba330d8990a016f8a929a.gif#pic_center\" alt=\"图片\"><br> 这样，我们便完成了自动发送微信消息的功能了。</p>\r\n<h1><a name=\"t3\"></a><a id=\"apscheduler_123\"></a><strong>apscheduler</strong></h1>\r\n<p>APScheduler 是一个Python库，可实现延迟调度要执行Python代码的功能，可以只执行一次，也可以定期执行。可以随时添加新任务或删除旧任务。能够十分方便地进行定时任务。</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">scheduler <span class=\"token operator\">=</span> BlockingScheduler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 实例化一个调度器</span>\r\nscheduler<span class=\"token punctuation\">.</span>add_job<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">,</span> <span class=\"token string\"></span><span class=\"token punctuation\">,</span> run_date<span class=\"token operator\">=</span>datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2021</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 添加任务</span>\r\nscheduler<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li></ul></pre>\r\n<p>add_job 方法在这里传了 3 个参数，第一个为到时间后要执行的函数，第二个为触发器的类型。这里选用的是 date 触发器，特定的时间点触发，作业任务只会执行一次。第三个参数 run_date 就是执行的时间。在这前我已经把自动发送消息的代码封装为了 main 函数，只需到时后调用即可。</p>\r\n<h1><a name=\"t4\"></a><a id=\"_136\"></a><strong>部分代码</strong></h1>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\"><span class=\"token keyword\">import</span> pyautogui\r\n<span class=\"token keyword\">import</span> pyperclip\r\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\r\n<span class=\"token keyword\">from</span> apscheduler<span class=\"token punctuation\">.</span>schedulers<span class=\"token punctuation\">.</span>blocking <span class=\"token keyword\">import</span> BlockingScheduler\r\n\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n  pyautogui<span class=\"token punctuation\">.</span>PAUSE <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\n\r\n  icon_position <span class=\"token operator\">=</span> pyautogui<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">(</span>x<span class=\"token operator\">=</span><span class=\"token number\">148</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token number\">879</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 任务栏图标位置</span>\r\n  entry_position <span class=\"token operator\">=</span> pyautogui<span class=\"token punctuation\">.</span>Point<span class=\"token punctuation\">(</span>x<span class=\"token operator\">=</span><span class=\"token number\">174</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token number\">751</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 输入框位置</span>\r\n\r\n  pyautogui<span class=\"token punctuation\">.</span>moveTo<span class=\"token punctuation\">(</span>icon_position<span class=\"token punctuation\">,</span> duration<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># duration为执行时长，可选</span>\r\n  pyautogui<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>icon_position<span class=\"token punctuation\">)</span>\r\n  pyautogui<span class=\"token punctuation\">.</span>moveTo<span class=\"token punctuation\">(</span>entry_position<span class=\"token punctuation\">,</span> duration<span class=\"token operator\">=</span><span class=\"token number\">0.7</span><span class=\"token punctuation\">)</span>\r\n  pyautogui<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span>entry_position<span class=\"token punctuation\">)</span>\r\n  pyperclip<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token string\"></span><span class=\"token punctuation\">)</span>\r\n  pyautogui<span class=\"token punctuation\">.</span>hotkey<span class=\"token punctuation\">(</span><span class=\"token string\"></span><span class=\"token punctuation\">,</span> <span class=\"token string\"></span><span class=\"token punctuation\">)</span>\r\n  pyautogui<span class=\"token punctuation\">.</span>press<span class=\"token punctuation\">(</span><span class=\"token string\"></span><span class=\"token punctuation\">)</span>\r\n    pyperclip<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token string\"></span><span class=\"token punctuation\">)</span>\r\n  pyautogui<span class=\"token punctuation\">.</span>hotkey<span class=\"token punctuation\">(</span><span class=\"token string\"></span><span class=\"token punctuation\">,</span> <span class=\"token string\"></span><span class=\"token punctuation\">)</span>\r\n  pyautogui<span class=\"token punctuation\">.</span>press<span class=\"token punctuation\">(</span><span class=\"token string\"></span><span class=\"token punctuation\">)</span>\r\n\r\nscheduler <span class=\"token operator\">=</span> BlockingScheduler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 实例化</span>\r\nscheduler<span class=\"token punctuation\">.</span>add_job<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">,</span> <span class=\"token string\"></span><span class=\"token punctuation\">,</span> run_date<span class=\"token operator\">=</span>datetime<span class=\"token punctuation\">(</span><span class=\"token number\">2021</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 添加任务</span>\r\nscheduler<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li><li style=\"color: rgb(153, 153, 153);\">19</li><li style=\"color: rgb(153, 153, 153);\">20</li><li style=\"color: rgb(153, 153, 153);\">21</li><li style=\"color: rgb(153, 153, 153);\">22</li><li style=\"color: rgb(153, 153, 153);\">23</li><li style=\"color: rgb(153, 153, 153);\">24</li><li style=\"color: rgb(153, 153, 153);\">25</li></ul></pre>\r\n<p>完成啦！现在可以去睡觉了。</p>\r\n<h1><a name=\"t5\"></a><a id=\"_169\"></a><strong>结果</strong></h1>\r\n<p>第二天早上起床，我被我妈妈骂了一顿，问我为什么午夜12点的时候电脑还亮着，而且还在自己发微信！</p>\r\n<p>不过，好在女朋友没丢，我成功完成了女朋友的任务！<br> <img src=\"https://img-blog.csdnimg.cn/img_convert/9eed3bc254bf798b38d7737c9c4569a0.gif#pic_center\" alt=\"图片\"></p>\r\n<p>好啦，这篇文章就到这里了。以上就是我分享的全部内容，感谢阅读！</p>\r\n<p>别忘了<strong>点赞</strong>，<strong>在看</strong>哈~</p>\r\n<h2><a name=\"t6\"></a><a id=\"_183\"></a>推荐文章</h2>\r\n<ul><li> <p><a href=\"https://blog.csdn.net/weixin_38037405/article/details/123238694?spm=1001.2014.3001.5501\">李宏毅《机器学习》国语课程(2022)来了</a></p> </li><li> <p><a href=\"https://blog.csdn.net/qq_34160248/article/details/122976343?spm=1001.2014.3001.5501\">有人把吴恩达老师的机器学习和深度学习做成了中文版</a></p> </li><li> <p><a href=\"https://blog.csdn.net/weixin_38037405/article/details/122367702?spm=1001.2014.3001.5501\">上瘾了，最近又给公司撸了一个可视化大屏(附源码)</a></p> </li><li> <p><a href=\"https://blog.csdn.net/weixin_38037405/article/details/121956510?spm=1001.2014.3001.5501\">如此优雅，4款 Python 自动数据分析神器真香啊</a></p> </li><li> <p><a href=\"https://blog.csdn.net/weixin_38037405/article/details/121805448?spm=1001.2014.3001.5501\">梳理半月有余，精心准备了17张知识思维导图，这次要讲清统计学</a></p> </li><li> <p><a href=\"https://blog.csdn.net/qq_34160248/article/details/124189026?spm=1001.2014.3001.5501\">香的很，整理了20份可视化大屏模板</a></p> </li></ul>\r\n<h2><a name=\"t7\"></a><a id=\"_192\"></a>技术交流</h2>\r\n<p><strong>完整代码、数据获取，可以找我来要</strong></p>\r\n<p>技术交流、求职内推、干货汇总、与 3000+来自阿里、北大、清华、中科院、CMU、腾讯、百度等名校名企开发者互动交流~</p>\r\n<p>目前开通了技术交流群，群友已超过<strong>3000人</strong>，添加时最好的备注方式为：来源+兴趣方向，方便找到志同道合的朋友</p>\r\n<ul><li>方式①、发送如下图片至微信，长按识别，后台回复：加群；</li><li>方式②、添加微信号：<strong>dkl88191</strong>，备注：来自CSDN</li><li>方式③、微信搜索公众号：<strong>Python学习与数据挖掘</strong>，后台回复：加群<br> <img src=\"https://img-blog.csdnimg.cn/6c499c4b263c4cf3a3fc42170adf7e0a.png\" alt=\"在这里插入图片描述\"></li></ul>\r\n                </div><div data-report-view=\"{&quot;mod&quot;:&quot;1585297308_001&quot;,&quot;spm&quot;:&quot;1001.2101.3001.6548&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/qq_34160248/article/details/124890488&quot;,&quot;extend1&quot;:&quot;pc&quot;,&quot;ab&quot;:&quot;new&quot;}\"><div></div></div>\r\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-3fd7f7a902.css\" rel=\"stylesheet\">\r\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-49037e4d27.css\" rel=\"stylesheet\">\r\n        </div>', '2022-06-05 19:25:42');
INSERT INTO `cms_article` VALUES (5, 3, '手把手教你使用YOLOV5训练自己的目标检测模型-口罩检测-视频教程', 'admin', '', 1, 40, '<article class=\"baidu_pl\">\r\n        <div id=\"article_content\" class=\"article_content clearfix\">\r\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-163de54645.css\">\r\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-light\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\r\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\r\n                    </svg>\r\n                    <h1><a name=\"t0\"></a><a id=\"YOLOV5_0\"></a>手把手教你使用<a href=\"https://so.csdn.net/so/search?q=YOLOV5&amp;spm=1001.2101.3001.7020\" target=\"_blank\" class=\"hl hl-1\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=YOLOV5&amp;spm=1001.2101.3001.7020&quot;}\" data-tit=\"YOLOV5\" data-pretit=\"yolov5\">YOLOV5</a>训练自己的目标检测模型</h1>\r\n<p>大家好，这里是肆十二（dejahu），好几个月没有更新了，这两天看了一下关注量，突然多了1k多个朋友关注，想必都是大作业系列教程来的小伙伴。既然有这么多朋友关注这个大作业系列，并且也差不多到了毕设开题和大作业提交的时间了，那我直接就是一波更新。这期的内容相对于上期的果蔬分类和垃圾识别无论是在内容还是新意上我们都进行了船新的升级，我们这次要使用YOLOV5来训练一个口罩检测模型，比较契合当下的疫情，并且目标检测涉及到的知识点也比较多，这次的内容除了可以作为大家的大作业之外，也可以作为一些小伙伴的毕业设计。废话不多说，我们直接开始今天的内容。</p>\r\n<blockquote>\r\n <p>B站讲解视频：<a href=\"https://www.bilibili.com/video/BV1YL4y1J7xz\">手把手教你使用YOLOV5训练自己的目标检测模型_哔哩哔哩_bilibili</a></p>\r\n <p>CSDN博客：<a href=\"https://blog.csdn.net/ECHOSON/article/details/121939535\">手把手教你使用YOLOV5训练自己的目标检测模型-口罩检测-视频教程_dejahu的博客-CSDN博客</a></p>\r\n <p>代码地址：<a href=\"https://gitee.com/song-laogou/yolov5-mask-42\">YOLOV5-mask-42: 基于YOLOV5的口罩检测系统-提供教学视频 (gitee.com)</a></p>\r\n <p>处理好的<a href=\"https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E9%9B%86&amp;spm=1001.2101.3001.7020\" target=\"_blank\" class=\"hl hl-1\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E9%9B%86&amp;spm=1001.2101.3001.7020&quot;}\" data-tit=\"数据集\" data-pretit=\"数据集\">数据集</a>和训练好的模型：<a href=\"https://download.csdn.net/download/ECHOSON/63290559\">YOLOV5口罩检测数据集+代码+模型2000张标注好的数据+教学视频.zip-深度学习文档类资源-CSDN文库</a></p>\r\n <p>更多相关的数据集：<a href=\"https://blog.csdn.net/ECHOSON/article/details/121892887\">目标检测数据集清单-附赠YOLOV5模型训练和使用教程_dejahu的博客-CSDN博客</a></p>\r\n</blockquote>\r\n<p>先来看看我们要实现的效果，我们将会通过数据来训练一个口罩检测的模型，并用pyqt5进行封装，实现图片口罩检测、视频口罩检测和摄像头实时口罩检测的功能。</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/359b17b5cbd3fe7501749b7c19c169c9.png\" alt=\"image-20211212181048969\"></p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0596725ca46fa9ca9a5934ee5c78eeb1.png\" alt=\"image-20211212194124635\"></p>\r\n<h2><a name=\"t1\"></a><a id=\"_20\"></a>下载代码</h2>\r\n<p>代码的下载地址是：[<a href=\"https://gitee.com/song-laogou/yolov5-mask-42\">YOLOV5-mask-42: 基于YOLOV5的口罩检测系统-提供教学视频 (gitee.com)</a>](https://github.com/ultralytics/yolov5)</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/209e68db61ac942a48d276b96be0a315.png\" alt=\"image-20211214191424378\"></p>\r\n<h2><a name=\"t2\"></a><a id=\"_26\"></a>配置环境</h2>\r\n<p>不熟悉pycharm的anaconda的小伙伴请先看这篇csdn博客，了解pycharm和anaconda的基本操作</p>\r\n<p><a href=\"https://blog.csdn.net/ECHOSON/article/details/117220445\">如何在pycharm中配置anaconda的虚拟环境_dejahu的博客-CSDN博客_如何在pycharm中配置anaconda</a></p>\r\n<p>anaconda安装完成之后请切换到国内的源来提高下载速度 ，命令如下：</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-bash has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">conda config --remove-key channels\r\nconda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/\r\nconda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/\r\nconda config --add channels https://mirrors.bfsu.edu.cn/anaconda/cloud/pytorch/\r\nconda config --set show_channel_urls <span class=\"token function\">yes</span>\r\npip config <span class=\"token builtin class-name\">set</span> global.index-url https://mirrors.ustc.edu.cn/pypi/web/simple\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li></ul></pre>\r\n<p>首先创建python3.8的虚拟环境，请在命令行中执行下列操作：</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-bash has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">conda create -n yolo5 <span class=\"token assign-left variable\">python</span><span class=\"token operator\">==</span><span class=\"token number\">3.8</span>.5\r\nconda activate yolo5\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li></ul></pre>\r\n<h3><a name=\"t3\"></a><a id=\"pytorchgpucpu_52\"></a>pytorch安装（gpu版本和cpu版本的安装）</h3>\r\n<p>实际测试情况是YOLOv5在CPU和GPU的情况下均可使用，不过在CPU的条件下训练那个速度会令人发指，所以有条件的小伙伴一定要安装GPU版本的Pytorch，没有条件的小伙伴最好是租服务器来使用。</p>\r\n<p>GPU版本安装的具体步骤可以参考这篇文章：<a href=\"https://blog.csdn.net/ECHOSON/article/details/118420968\">2021年Windows下安装GPU版本的Tensorflow和Pytorch_dejahu的博客-CSDN博客</a></p>\r\n<p>需要注意以下几点：</p>\r\n<ul><li>安装之前一定要先更新你的显卡驱动，去官网下载对应型号的驱动安装</li><li>30系显卡只能使用cuda11的版本</li><li>一定要创建虚拟环境，这样的话各个深度学习框架之间不发生冲突</li></ul>\r\n<p>我这里创建的是python3.8的环境，安装的Pytorch的版本是1.8.0，命令如下：</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-cmd has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">conda install pytorch==1.8.0 torchvision torchaudio cudatoolkit=10.2 # 注意这条命令指定Pytorch的版本和cuda的版本\r\nconda install pytorch==1.8.0 torchvision==0.9.0 torchaudio==0.8.0 cpuonly # CPU的小伙伴直接执行这条命令即可\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li></ul></pre>\r\n<p>安装完毕之后，我们来测试一下GPU是否</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/63a8743ba1564abdb386308c8c0d7893.png\" alt=\"image-20210726172454406\"></p>\r\n<h3><a name=\"t4\"></a><a id=\"pycocotools_75\"></a>pycocotools的安装</h3>\r\n<p><font color=\"red\">后面我发现了windows下更简单的安装方法，大家可以使用下面这个指令来直接进行安装，不需要下载之后再来安装</font></p>\r\n<pre class=\"prettyprint\"><code class=\"has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">pip install pycocotools-windows\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li></ul></pre>\r\n<h3><a name=\"t5\"></a><a id=\"_83\"></a>其他包的安装</h3>\r\n<p>另外的话大家还需要安装程序其他所需的包，包括opencv，matplotlib这些包，不过这些包的安装比较简单，直接通过pip指令执行即可，我们cd到yolov5代码的目录下，直接执行下列指令即可完成包的安装。</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-bash has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">pip <span class=\"token function\">install</span> -r requirements.txt\r\npip <span class=\"token function\">install</span> pyqt5\r\npip <span class=\"token function\">install</span> labelme\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li></ul></pre>\r\n<h3><a name=\"t6\"></a><a id=\"_93\"></a>测试一下</h3>\r\n<p>在yolov5目录下执行下列代码</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-bash has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">python detect.py --source data/images/bus.jpg --weights pretrained/yolov5s.pt\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li></ul></pre>\r\n<p>执行完毕之后将会输出下列信息</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4ad7937fb10245092d62d60cb5264ace.png\" alt=\"image-20210610111308496\"></p>\r\n<p>在runs目录下可以找到检测之后的结果</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4fc0b8d5f8555efb961a0d7d04eb7447.png\" alt=\"image-20210610111426144\"></p>\r\n<p>按照官方给出的指令，这里的检测代码功能十分强大，是支持对多种图像和视频流进行检测的，具体的使用方法如下：</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-bash has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\"> python detect.py --source <span class=\"token number\">0</span>  <span class=\"token comment\"># webcam</span>\r\n                            file.jpg  <span class=\"token comment\"># image </span>\r\n                            file.mp4  <span class=\"token comment\"># video</span>\r\n                            path/  <span class=\"token comment\"># directory</span>\r\n                            path/*.jpg  <span class=\"token comment\"># glob</span>\r\n                            <span class=\"token string\">\'https://youtu.be/NUsoVlDFqZg\'</span>  <span class=\"token comment\"># YouTube video</span>\r\n                            <span class=\"token string\">\'rtsp://example.com/media.mp4\'</span>  <span class=\"token comment\"># RTSP, RTMP, HTTP stream</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li></ul></pre>\r\n<h2><a name=\"t7\"></a><a id=\"_123\"></a>数据处理</h2>\r\n<p>这里改成yolo的标注形式，之后专门出一期数据转换的内容。</p>\r\n<p>数据标注这里推荐的软件是labelimg，通过pip指令即可安装</p>\r\n<p>在你的虚拟环境下执行<code>pip install labelimg -i https://mirror.baidu.com/pypi/simple</code>命令进行安装，然后在命令行中直接执行labelimg软件即可启动数据标注软件。</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e2e9579dc55a4e5b3bbaedcfce9d64a0.png\" alt=\"image-20210609172156067\"></p>\r\n<p>软件启动后的界面如下：</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d4ecb955da4f912b89616fca0586ae74.png\" alt=\"image-20210609172557286\"></p>\r\n<h3><a name=\"t8\"></a><a id=\"_137\"></a>数据标注</h3>\r\n<p>虽然是yolo的模型训练，但是这里我们还是选择进行voc格式的标注，一是方便在其他的代码中使用数据集，二是我提供了数据格式转化</p>\r\n<p><strong>标注的过程是：</strong></p>\r\n<p><strong>1.打开图片目录</strong></p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/d6f1f4a9c52a6870ae4c4fa7bc1eaeb2.png\" alt=\"image-20210610004158135\"></p>\r\n<p><strong>2.设置标注文件保存的目录并设置自动保存</strong></p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f1932d4d1e9db2e02b8aedc330a72c99.png\" alt=\"image-20210610004215206\"></p>\r\n<p><strong>3.开始标注，画框，标记目标的label，<code>crtl+s</code>保存，然后d切换到下一张继续标注，不断重复重复</strong></p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/341c2af382f791f201a97ad6de5ec330.png\" alt=\"image-20211212201302682\"></p>\r\n<p>labelimg的快捷键如下，学会快捷键可以帮助你提高数据标注的效率。</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/eb217285796cd19a92483bbc6edef7a3.png\" alt=\"image-20210609171855504\"></p>\r\n<p>标注完成之后你会得到一系列的txt文件，这里的txt文件就是目标检测的标注文件，其中txt文件和图片文件的名称是一一对应的，如下图所示：</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c9bd0a8fff78c3784ef4f74acbf1ef2c.png\" alt=\"image-20211212170509714\"></p>\r\n<p>打开具体的标注文件，你将会看到下面的内容，txt文件中每一行表示一个目标，以空格进行区分，分别表示目标的类别id，归一化处理之后的中心点x坐标、y坐标、目标框的w和h。</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/551de550a33e4e994c03cb34c1dc3505.png\" alt=\"image-20211212170853677\"></p>\r\n<p><strong>4.修改数据集配置文件</strong></p>\r\n<p>标记完成的数据请按照下面的格式进行放置，方便程序进行索引。</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-bash has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">YOLO_Mask\r\n└─ score\r\n       ├─ images\r\n       │    ├─ <span class=\"token builtin class-name\">test</span> <span class=\"token comment\"># 下面放测试集图片</span>\r\n       │    ├─ train <span class=\"token comment\"># 下面放训练集图片</span>\r\n       │    └─ val <span class=\"token comment\"># 下面放验证集图片</span>\r\n       └─ labels\r\n              ├─ <span class=\"token builtin class-name\">test</span> <span class=\"token comment\"># 下面放测试集标签</span>\r\n              ├─ train <span class=\"token comment\"># 下面放训练集标签</span>\r\n              ├─ val <span class=\"token comment\"># 下面放验证集标签</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li></ul></pre>\r\n<p>这里的配置文件是为了方便我们后期训练使用，我们需要在data目录下创建一个<code>mask_data.yaml</code>的文件，如下图所示：</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/47bdfed8688455e7209518e03856af15.png\" alt=\"image-20211212174510070\"></p>\r\n<p>到这里，数据集处理部分基本完结撒花了，下面的内容将会是模型训练！</p>\r\n<h2><a name=\"t9\"></a><a id=\"_190\"></a>模型训练</h2>\r\n<h3><a name=\"t10\"></a><a id=\"_192\"></a>模型的基本训练</h3>\r\n<p>在models下建立一个<code>mask_yolov5s.yaml</code>的模型配置文件，内容如下：</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/0abb0cc133494868872794ed7c461159.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IKG5Y2B5LqM,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\r\n<p>模型训练之前，请确保代码目录下有以下文件</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/2ee01989294c5b9cc3340df41becb69f.png\" alt=\"image-20211212174920551\"></p>\r\n<p>执行下列代码运行程序即可：</p>\r\n<pre class=\"prettyprint\"><code class=\"has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">python train.py --data mask_data.yaml --cfg mask_yolov5s.yaml --weights pretrained/yolov5s.pt --epoch 100 --batch-size 4 --device cpu\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li></ul></pre>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/be378dd9c24777b795ceb6ad774f10e5.png\" alt=\"image-20210610113348751\"></p>\r\n<p>训练代码成功执行之后会在命令行中输出下列信息，接下来就是安心等待模型训练结束即可。</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/e26e4b4957dc4a73b2aed82f30cf823c.png\" alt=\"image-20210610112655726\"></p>\r\n<p>根据数据集的大小和设备的性能，经过漫长的等待之后模型就训练完了，输出如下：</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/b2767782b3205a8b66e38e162ff22ce2.png\" alt=\"image-20210610134412258\"></p>\r\n<p>在<code>train/runs/exp3</code>的目录下可以找到训练得到的模型和日志文件</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5de92e89b8ff8c8ca2fb99db49b8b451.png\" alt=\"image-20210610145140340\"></p>\r\n<p>当然还有一些骚操作，比如模型训练到一半可以从中断点继续训练，这些就交给大家下去自行探索喽。</p>\r\n<h2><a name=\"t11\"></a><a id=\"_225\"></a>模型评估</h2>\r\n<p>出了在博客一开头你就能看到的检测效果之外，还有一些学术上的评价指标用来表示我们模型的性能，其中目标检测最常用的评价指标是mAP，mAP是介于0到1之间的一个数字，这个数字越接近于1，就表示你的模型的性能更好。</p>\r\n<p>一般我们会接触到两个指标，分别是召回率recall和精度precision，两个指标p和r都是简单地从一个角度来判断模型的好坏，均是介于0到1之间的数值，其中接近于1表示模型的性能越好，接近于0表示模型的性能越差，为了综合评价目标检测的性能，一般采用均值平均密度map来进一步评估模型的好坏。我们通过设定不同的置信度的阈值，可以得到在模型在不同的阈值下所计算出的p值和r值，一般情况下，p值和r值是负相关的，绘制出来可以得到如下图所示的曲线，其中曲线的面积我们称AP，目标检测模型中每种目标可计算出一个AP值，对所有的AP值求平均则可以得到模型的mAP值，以本文为例，我们可以计算佩戴安全帽和未佩戴安全帽的两个目标的AP值，我们对两组AP值求平均，可以得到整个模型的mAP值，该值越接近1表示模型的性能越好。</p>\r\n<p>关于更加学术的定义大家可以在知乎或者csdn上自行查阅，以我们本次训练的模型为例，在模型结束之后你会找到三张图像，分别表示我们模型在验证集上的召回率、准确率和均值平均密度。</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/88ebb421b4e7567a77d8725611467352.png\" alt=\"image-20211212175851524\"></p>\r\n<p>以PR-curve为例，你可以看到我们的模型在验证集上的均值平均密度为0.832。</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/8224742a5103efce66fc3ae4e2d646a0.png\" alt=\"PR_curve\"></p>\r\n<p>如果你的目录下没有这样的曲线，可能是因为你的模型训练一半就停止了，没有执行验证的过程，你可以通过下面的命令来生成这些图片。</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-bash has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">python val.py --data data/mask_data.yaml --weights runs/train/exp_yolov5s/weights/best.pt --img <span class=\"token number\">640</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li></ul></pre>\r\n<p>最后，这里是一张详细的评价指标的解释清单，可以说是最原始的定义了。</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4c373255f29c8d0d0f33ae9d065aea25.png\" alt=\"img\"></p>\r\n<h2><a name=\"t12\"></a><a id=\"_249\"></a>模型使用</h2>\r\n<p>模型的使用全部集成在了<code>detect.py</code>目录下，你按照下面的指令指你要检测的内容即可</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-bash has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\"> <span class=\"token comment\"># 检测摄像头</span>\r\n python detect.py  --weights runs/train/exp_yolov5s/weights/best.pt --source <span class=\"token number\">0</span>  <span class=\"token comment\"># webcam</span>\r\n <span class=\"token comment\"># 检测图片文件</span>\r\n  python detect.py  --weights runs/train/exp_yolov5s/weights/best.pt --source file.jpg  <span class=\"token comment\"># image </span>\r\n <span class=\"token comment\"># 检测视频文件</span>\r\n   python detect.py --weights runs/train/exp_yolov5s/weights/best.pt --source file.mp4  <span class=\"token comment\"># video</span>\r\n <span class=\"token comment\"># 检测一个目录下的文件</span>\r\n  python detect.py --weights runs/train/exp_yolov5s/weights/best.pt path/  <span class=\"token comment\"># directory</span>\r\n <span class=\"token comment\"># 检测网络视频</span>\r\n  python detect.py --weights runs/train/exp_yolov5s/weights/best.pt <span class=\"token string\">\'https://youtu.be/NUsoVlDFqZg\'</span>  <span class=\"token comment\"># YouTube video</span>\r\n <span class=\"token comment\"># 检测流媒体</span>\r\n  python detect.py --weights runs/train/exp_yolov5s/weights/best.pt <span class=\"token string\">\'rtsp://example.com/media.mp4\'</span>  <span class=\"token comment\"># RTSP, RTMP, HTTP stream                            </span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li></ul></pre>\r\n<p>比如以我们的口罩模型为例，如果我们执行<code>python detect.py --weights runs/train/exp_yolov5s/weights/best.pt --source data/images/fishman.jpg</code>的命令便可以得到这样的一张检测结果。</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/912c459e4ac67b3958bb79c89814a3f9.png\" alt=\"fishman\"></p>\r\n<h2><a name=\"t13\"></a><a id=\"_272\"></a>构建可视化界面</h2>\r\n<p>可视化界面的部分在<code>window.py</code>文件中，是通过pyqt5完成的界面设计，在启动界面前，你需要将模型替换成你训练好的模型，替换的位置在<code>window.py</code>的第60行，修改成你的模型地址即可，如果你有GPU的话，可以将device设置为0，表示使用第0行GPU，这样可以加快模型的识别速度嗷。<br> <font color=\"red\">！！！使用GPU的话</font><br> <img src=\"https://img-blog.csdnimg.cn/f13de384aabd4d21aede687afad45882.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IKG5Y2B5LqM,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/65036ead08139c9fcc761b71753e8c82.png\" alt=\"image-20211212194547804\"></p>\r\n<p>替换之后直接右键run即可启动图形化界面了，快去自己测试一下看看效果吧</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c13bb67ffb6608ce475319e53af45836.png\" alt=\"image-20211212194914890\"></p>\r\n<h2><a name=\"t14\"></a><a id=\"_284\"></a>找到我</h2>\r\n<p>你可以通过这些方式来寻找我。</p>\r\n<p>B站：<a href=\"https://space.bilibili.com/161240964\">肆十二-</a></p>\r\n<p>CSDN：<a href=\"https://blog.csdn.net/ECHOSON\">肆十二</a></p>\r\n<p>知乎：<a href=\"https://www.zhihu.com/people/song-chen-ming-28\">肆十二 </a></p>\r\n<p>微博：<a href=\"https://weibo.com/u/5999979327\">肆十二-</a></p>\r\n<p>现在关注以后就是老朋友喽！</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/252770093dab9b1333d00505da50aae9.png\" alt=\"image-20211212195912911\"></p>\r\n                </div><div data-report-view=\"{&quot;mod&quot;:&quot;1585297308_001&quot;,&quot;spm&quot;:&quot;1001.2101.3001.6548&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/ECHOSON/article/details/121939535&quot;,&quot;extend1&quot;:&quot;pc&quot;,&quot;ab&quot;:&quot;new&quot;}\"><div></div></div>\r\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-3fd7f7a902.css\" rel=\"stylesheet\">\r\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-49037e4d27.css\" rel=\"stylesheet\">\r\n        </div>\r\n\r\n    </article>', '2022-06-05 19:24:59');
INSERT INTO `cms_article` VALUES (6, 4, 'Python 中堪称神仙的6个内置函数', 'admin', '', 1, 2, '<article class=\"baidu_pl\">\r\n        <div id=\"article_content\" class=\"article_content clearfix\">\r\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-163de54645.css\">\r\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\r\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\r\n                    </svg>\r\n                    <p>大家好，之前给大家分享过3个节省时间的Python技巧，当时就提出了，建议大家多使用Python的<strong>内置函数</strong>，既能提高自己的Python程序速度，同时还能保持代码简洁易懂。</p>\r\n<p>今天，我会一次性分享6个堪称神仙的<a href=\"https://so.csdn.net/so/search?q=%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0&amp;spm=1001.2101.3001.7020\" target=\"_blank\" class=\"hl hl-1\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0&amp;spm=1001.2101.3001.7020&quot;}\" data-tit=\"内置函数\" data-pretit=\"内置函数\">内置函数</a>。在很多计算机书籍中，它们也通常作为<strong>高阶函数</strong>来介绍。而我自己在日常工作中，经常使用它们来使代码更快，更易于理解。<strong>喜欢记得收藏、关注、点赞。</strong></p>\r\n<p><strong>注：完整代码、资料、技术交流，文末获取</strong><br> <img src=\"https://img-blog.csdnimg.cn/442ef83c4d3342fba0d56cae91556903.jpeg#pic_center\" alt=\"在这里插入图片描述\"></p>\r\n<h2><a name=\"t0\"></a><a id=\"Lambda__8\"></a><a href=\"https://so.csdn.net/so/search?q=Lambda&amp;spm=1001.2101.3001.7020\" target=\"_blank\" class=\"hl hl-1\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=Lambda&amp;spm=1001.2101.3001.7020&quot;}\" data-tit=\"Lambda\" data-pretit=\"lambda\">Lambda</a> 函数</h2>\r\n<p><code>Lambda</code>函数用于创建匿名函数，即没有名称的函数。它只是一个<a href=\"https://so.csdn.net/so/search?q=%E8%A1%A8%E8%BE%BE%E5%BC%8F&amp;spm=1001.2101.3001.7020\" target=\"_blank\" class=\"hl hl-1\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E8%A1%A8%E8%BE%BE%E5%BC%8F&amp;spm=1001.2101.3001.7020&quot;}\" data-tit=\"表达式\" data-pretit=\"表达式\">表达式</a>，函数体比def简单很多。当我们需要创建一个函数来执行单个操作并且可以在一行中编写时，就可以用到匿名函数了。</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">[</span>arg1 <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>arg2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>argn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>expression\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li></ul></pre>\r\n<p>lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。例如：</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\"><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token operator\">+</span><span class=\"token number\">2</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li></ul></pre>\r\n<p>如果我们也想像def定义的函数随时调用，可以将<code>lambda函数</code>分配给这样的函数对象。</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">add2 <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token operator\">+</span><span class=\"token number\">2</span>\r\nadd2<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li></ul></pre>\r\n<p>输出结果：</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f6411fdfb86a12125355d6df9fca678b.png#pic_center\" alt=\"图片\"></p>\r\n<p>利用<code>Lambda</code>函数，可以将代码简化很多，具体再举个例子。</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/aa62e56fe3d08d609512439fe55c9c7c.png\" alt=\"图片\"></p>\r\n<p>如上图所示，结果列表<code>newlist</code>是使用lambda函数用一行代码生成的。</p>\r\n<h2><a name=\"t1\"></a><a id=\"Map__40\"></a>Map 函数</h2>\r\n<p><code>map()</code>函数会将一个函数映射到一个输入列表的所有元素上。</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\"><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">,</span>iterable<span class=\"token punctuation\">)</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li></ul></pre>\r\n<p>比如我们先创建了一个函数来返回一个大写的输入单词，然后将此函数应有到列表<code>colors</code>中的所有元素。</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\"><span class=\"token keyword\">def</span> <span class=\"token function\">makeupper</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">return</span> word<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\ncolors<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\'red\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\'yellow\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\'green\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\'black\'</span><span class=\"token punctuation\">]</span>\r\ncolors_uppercase<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>makeupper<span class=\"token punctuation\">,</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\ncolors_uppercase\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li></ul></pre>\r\n<p>此外，我们还可以使用<code>匿名函数lambda</code>来配合map函数，这样可以更加精简。</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">colors<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\'red\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\'yellow\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\'green\'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\'black\'</span><span class=\"token punctuation\">]</span>\r\ncolors_uppercase<span class=\"token operator\">=</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">.</span>upper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\ncolors_uppercase\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li></ul></pre>\r\n<p>如果我们不用Map函数的话，就需要使用for循环。</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/86e1de25bec293f77ed6e8a8b9689929.png#pic_center\" alt=\"图片\"></p>\r\n<p>如上图所示，在实际使用中<strong>Map函数会比for循环依次列表元素的方法快1.5倍</strong>。</p>\r\n<h2><a name=\"t2\"></a><a id=\"Reduce_74\"></a>Reduce函数</h2>\r\n<p>当需要对一个列表进行一些计算并返回结果时，<code>reduce()</code>是个非常有用的函数。举个例子，当需要计算一个整数列表所有元素的乘积时，即可使用reduce函数实现。[1]</p>\r\n<p>它与函数的最大的区别就是，<code>reduce()</code>里的映射函数（function）接收两个参数，而map接收一个参数。</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\"><span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">,</span> iterable<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> initializer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li></ul></pre>\r\n<p>接下来我们用实例来演示<code>reduce()</code>的代码执行过程。</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> <span class=\"token builtin\">reduce</span>\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span>   <span class=\"token comment\"># 两数相加</span>\r\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y\r\nnumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\r\nsum1 <span class=\"token operator\">=</span> <span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">,</span> numbers<span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 计算列表和</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li></ul></pre>\r\n<p>得到结果<code>sum1 = 15</code></p>\r\n<p>我们会看到，reduce将一个相加函数<code>add()</code>作用在一个列表[1,2,3,4,5]上，映射函数接收了两个参数，<code>reduce()</code><strong>把结果继续和列表的下一个元素做累加计算</strong>。</p>\r\n<p>此外，我们同样可以使用<code>匿名函数lambda</code>来配合reduce函数，这样可以更加精简。</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> <span class=\"token builtin\">reduce</span>\r\nnumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\r\nsum2 <span class=\"token operator\">=</span> <span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">,</span> numbers<span class=\"token punctuation\">)</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li></ul></pre>\r\n<p>得到输出<code>sum2= 15</code>，与之前结果保持一致。</p>\r\n<blockquote>\r\n <p>需要注意：Python3.x开始<code>reduce()</code>已经被移到functools模块里[2]，如果我们要使用，需要用<code>from functools import reduce</code>导入.</p>\r\n</blockquote>\r\n<h2><a name=\"t3\"></a><a id=\"enumerate__112\"></a>enumerate 函数</h2>\r\n<p><code>enumerate()</code>函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在for循环当中。它的语法如下所示：</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\"><span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">,</span> start<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li></ul></pre>\r\n<p>它的两个参数，一个是序列、迭代器或其他支持迭代对象；另一个是下标起始位置，默认情况从0开始，也可以自定义计数器的起始编号。</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\'red\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'yellow\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'green\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'black\'</span><span class=\"token punctuation\">]</span>\r\nresult <span class=\"token operator\">=</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">)</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li></ul></pre>\r\n<p>如果我们有一个存放colors的颜色列表，运行后就会得到一个enumerate(枚举) 对象。它可以直接在for循环中使用，也可以转换为列表，具体用法如下所示。</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\"><span class=\"token keyword\">for</span> count<span class=\"token punctuation\">,</span> element <span class=\"token keyword\">in</span> result<span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"迭代编号:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>count<span class=\"token punctuation\">}</span></span><span class=\"token string\">,对应元素:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{<!-- --></span>element<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li></ul></pre>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ee03408970592f268655b931aba9a698.png#pic_center\" alt=\"图片\"></p>\r\n<h2><a name=\"t4\"></a><a id=\"Zip__137\"></a>Zip 函数</h2>\r\n<p><code>zip()</code>函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表[3]。</p>\r\n<p>我们还是用两个列表作为例子演示：</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\'red\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'yellow\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'green\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'black\'</span><span class=\"token punctuation\">]</span>\r\nfruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\'apple\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'pineapple\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'grapes\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'cherry\'</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">,</span>fruits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li></ul></pre>\r\n<p>输出结果：</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/68ff9e06310e559bfaed0669d6c32e8b.png#pic_center\" alt=\"图片\"></p>\r\n<p>当我们使用<code>zip()</code>函数时，如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同。</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">prices <span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">,</span>fruits<span class=\"token punctuation\">,</span>prices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li></ul></pre>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/44338a881a4b04f27007fc001a85ad24.png#pic_center\" alt=\"图片\"></p>\r\n<h2><a name=\"t5\"></a><a id=\"Filter__165\"></a>Filter 函数</h2>\r\n<p><code>filter()</code>函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表，其语法如下所示[4]。</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\"><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>function<span class=\"token punctuation\">,</span> iterable<span class=\"token punctuation\">)</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li></ul></pre>\r\n<p>比如举个例子，我们可以先创建一个函数来检查单词是否为大写，然后使用<code>filter()</code>函数过滤出列表中的所有奇数：</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\"><span class=\"token keyword\">def</span> <span class=\"token function\">is_odd</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\r\n\r\nold_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\r\n\r\nnew_list <span class=\"token operator\">=</span> <span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>is_odd<span class=\"token punctuation\">,</span> old_list<span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>newlist<span class=\"token punctuation\">)</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li></ul></pre>\r\n<p>输出结果：</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/c9cb108ce97f1961cb4cdb35c902aa57.png#pic_center\" alt=\"图片\"></p>\r\n<hr>\r\n<p>今天分享的这6个内置函数，在使用 Python 进行数据分析或者其他复杂的自动化任务时非常方便。</p>\r\n<h2><a name=\"t6\"></a><a id=\"_194\"></a>推荐文章</h2>\r\n<ul><li> <p><a href=\"https://blog.csdn.net/weixin_38037405/article/details/123238694?spm=1001.2014.3001.5501\">李宏毅《机器学习》国语课程(2022)来了</a></p> </li><li> <p><a href=\"https://blog.csdn.net/qq_34160248/article/details/122976343?spm=1001.2014.3001.5501\">有人把吴恩达老师的机器学习和深度学习做成了中文版</a></p> </li><li> <p><a href=\"https://blog.csdn.net/weixin_38037405/article/details/122367702?spm=1001.2014.3001.5501\">上瘾了，最近又给公司撸了一个可视化大屏(附源码)</a></p> </li><li> <p><a href=\"https://blog.csdn.net/weixin_38037405/article/details/121956510?spm=1001.2014.3001.5501\">如此优雅，4款 Python 自动数据分析神器真香啊</a></p> </li><li> <p><a href=\"https://blog.csdn.net/weixin_38037405/article/details/121805448?spm=1001.2014.3001.5501\">梳理半月有余，精心准备了17张知识思维导图，这次要讲清统计学</a></p> </li><li> <p><a href=\"https://blog.csdn.net/qq_34160248/article/details/124189026?spm=1001.2014.3001.5501\">香的很，整理了20份可视化大屏模板</a></p> </li></ul>\r\n<h2><a name=\"t7\"></a><a id=\"_203\"></a>技术交流</h2>\r\n<p><strong>完整代码、资料、数据获取，可以按照下方方式找我</strong></p>\r\n<p>技术交流、求职内推、干货汇总、与 3000+来自阿里、北大、清华、中科院、CMU、腾讯、百度等名校名企开发者互动交流~</p>\r\n<p>目前开通了技术交流群，群友已超过<strong>3000人</strong>，添加时最好的备注方式为：来源+兴趣方向，方便找到志同道合的朋友</p>\r\n<ul><li>方式①、发送如下图片至微信，长按识别，后台回复：加群；</li><li>方式②、添加微信号：<strong>dkl88191</strong>，备注：来自CSDN</li><li>方式③、微信搜索公众号：<strong>Python学习与数据挖掘</strong>，后台回复：加群</li></ul>\r\n<p><img src=\"https://img-blog.csdnimg.cn/7b9c1a1959834532b5cc1fbc409a8b05.png#pic_center\" alt=\"在这里插入图片描述\"></p>\r\n                </div><div data-report-view=\"{&quot;mod&quot;:&quot;1585297308_001&quot;,&quot;spm&quot;:&quot;1001.2101.3001.6548&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/qq_34160248/article/details/124763983&quot;,&quot;extend1&quot;:&quot;pc&quot;,&quot;ab&quot;:&quot;new&quot;}\"><div></div></div>\r\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-3fd7f7a902.css\" rel=\"stylesheet\">\r\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-49037e4d27.css\" rel=\"stylesheet\">\r\n        </div>\r\n        <div id=\"treeSkill\" data-report-view=\"{&quot;spm&quot;:&quot;1001.2101.3001.6866&quot;}\" style=\"display: block;\"><div class=\"skill-tree-box\"><div class=\"skill-tree-head\">文章知识点与官方知识档案匹配，可进一步学习相关知识</div><div class=\"skill-tree-body\"><div class=\"skill-tree-item\"><span class=\"skill-tree-href\"><a data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.6866&quot;,&quot;dest&quot;:&quot;https://edu.csdn.net/skill/python/python-3-257&quot;}\" href=\"https://edu.csdn.net/skill/python/python-3-257\" target=\"_blank\">Python入门技能树</a><i></i><a data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.6866&quot;,&quot;dest&quot;:&quot;https://edu.csdn.net/skill/python/python-3-257&quot;}\" href=\"https://edu.csdn.net/skill/python/python-3-257\" target=\"_blank\">高级教程</a><i></i><a data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.6866&quot;,&quot;dest&quot;:&quot;https://edu.csdn.net/skill/python/python-3-257&quot;}\" href=\"https://edu.csdn.net/skill/python/python-3-257\" target=\"_blank\">函数</a></span><span class=\"skill-tree-con\"><span class=\"skill-tree-count\">48337</span> 人正在系统学习中</span></div></div></div></div>\r\n    </article>', '2022-06-05 19:24:50');
INSERT INTO `cms_article` VALUES (9, 4, 'Python 进程、线程、协程傻傻分不清楚？详细总结(附代码)', 'admin', '', 1, 0, '<article class=\"baidu_pl\">\r\n        <div id=\"article_content\" class=\"article_content clearfix\">\r\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-163de54645.css\">\r\n                <div id=\"content_views\" class=\"markdown_views prism-dracula\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\r\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\r\n                    </svg>\r\n                    <p><img src=\"https://img-blog.csdnimg.cn/857bdbbe875247a58569b6db40ace52a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATXIuV2ludGVyYA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\" height=\"260\"></p>\r\n<hr color=\"#FFF\" size=\"1&quot;\">\r\n<p></p>\r\n<div class=\"toc\">\r\n <h3><a name=\"t0\"></a>目录</h3>\r\n <ul><li><a href=\"#1__4\" target=\"_self\">1 什么是并发编程？</a></li><li><a href=\"#2__20\" target=\"_self\">2 进程与多进程</a></li><li><a href=\"#3__63\" target=\"_self\">3 线程与多线程</a></li><li><a href=\"#4__107\" target=\"_self\">4 协程与多协程</a></li><li><a href=\"#5__159\" target=\"_self\">5 总结</a></li></ul>\r\n</div>\r\n<p></p>\r\n<h1><a name=\"t1\"></a><a id=\"1__4\"></a>1 什么是<a href=\"https://so.csdn.net/so/search?q=%E5%B9%B6%E5%8F%91&amp;spm=1001.2101.3001.7020\" target=\"_blank\" class=\"hl hl-1\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E5%B9%B6%E5%8F%91&amp;spm=1001.2101.3001.7020&quot;}\" data-tit=\"并发\" data-pretit=\"并发\">并发</a>编程？</h1>\r\n<p><font color=\"#f00\"><strong>并发编程是实现多任务协同处理，改善系统性能的方式</strong></font>。Python中实现并发编程主要依靠</p>\r\n<blockquote>\r\n <ul><li><font color=\"#4a86e8\"><strong>进程(Process)</strong></font>：进程是计算机中的程序关于某数据集合的一次运行实例，是操作系统进行资源分配的最小单位</li><li><font color=\"#4a86e8\"><strong>线程(Thread)</strong></font>：线程被包含在进程之中，是操作系统进行程序调度执行的最小单位</li><li><font color=\"#4a86e8\"><strong>协程(Coroutine)</strong></font>：协程是用户态执行的轻量级编程模型，由单一线程内部发出控制信号进行调度</li></ul>\r\n</blockquote>\r\n<p>直接上一张图看看三者概念间的关系。</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/d5986a7ce9f442ef9329c90d16fd9f80.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATXIuV2ludGVyYA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\" height=\"350\"><br> 这张图说明了什么？首先，一条线程是进程中一个单一的顺序控制流，一个进程可以并发多个线程执行不同任务。协程由单一线程内部发出控制信号进行调度，而非受到操作系统管理，因此协程没有切换开销和同步锁机制，具有极高的执行效率。</p>\r\n<p>进程、线程、协程间的特性决定了它们的应用场景不同：</p>\r\n<p><font color=\"#f00\"><strong>协程常用于IO密集型工作，例如网络资源请求等；而进程、线程常用于计算密集型工作，例如科学计算、人工神经网络等</strong></font>。</p>\r\n<p>接下来对每种并发编程方法进行详细阐述。</p>\r\n<h1><a name=\"t2\"></a><a id=\"2__20\"></a>2 进程与多进程</h1>\r\n<p>Python多进程依赖于标准库<code>mutiprocessing</code>，进程类<code>Process</code>的常用方法如下</p>\r\n<div class=\"table-box\"><table><thead><tr><th>序号</th><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>1</td><td>start()</td><td>创建一个Process子进程实例并执行该实例的run()方法</td></tr><tr><td>2</td><td>run()</td><td>子进程需要执行的目标任务</td></tr><tr><td>3</td><td>join()</td><td>主进程阻塞等待子进程直到子进程结束才继续执行，可以设置等待超时时间timeout</td></tr><tr><td>4</td><td>terminate()</td><td>终止子进程</td></tr><tr><td>5</td><td>is_alive()</td><td>判断子进程是否终止</td></tr><tr><td>6</td><td>daemon</td><td>设置子进程是否随主进程退出而退出</td></tr></tbody></table></div>\r\n<p>创建多进程任务的实例如下</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\"><span class=\"token keyword\">import</span> os<span class=\"token punctuation\">,</span> time\r\n<span class=\"token keyword\">import</span> multiprocessing\r\n\r\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">myProcess</span><span class=\"token punctuation\">(</span>multiprocessing<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> kwargs<span class=\"token punctuation\">[</span><span class=\"token string\">\'name\'</span><span class=\"token punctuation\">]</span>\r\n\r\n    <span class=\"token keyword\">def</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"process name:\"</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\r\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>multiprocessing<span class=\"token punctuation\">.</span>current_process<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"process pid:\"</span><span class=\"token punctuation\">,</span>\r\n                  os<span class=\"token punctuation\">.</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"正在执行...\"</span><span class=\"token punctuation\">)</span>\r\n            time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\r\n    task <span class=\"token operator\">=</span> myProcess<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"testProcess\"</span><span class=\"token punctuation\">)</span>\r\n    task<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    task<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>		<span class=\"token comment\"># 该语句会阻塞主进程直至子进程结束</span>\r\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------\"</span><span class=\"token punctuation\">)</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li><li style=\"color: rgb(153, 153, 153);\">19</li><li style=\"color: rgb(153, 153, 153);\">20</li></ul></pre>\r\n<p>注意：Windows系统在子进程结束后会立即自动清除子进程实例；而Linux系统子进程实例仅当主进程结束后才被回收，在子进程结束但主进程仍在运行的时间内处于<font color=\"#4a86e8\"><strong>僵尸进程</strong></font>状态，会造成性能损失甚至死锁。对子进程实例的手动回收可以通过</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">p<span class=\"token punctuation\">.</span>terminate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\np<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li></ul></pre>\r\n<p>完成，此外，<code>start()</code>函数也有清除僵尸进程的功能。在使用多进程处理任务时并非进程越多越好，因为进程切换会造成性能开销。</p>\r\n<h1><a name=\"t3\"></a><a id=\"3__63\"></a>3 线程与<a href=\"https://so.csdn.net/so/search?q=%E5%A4%9A%E7%BA%BF%E7%A8%8B&amp;spm=1001.2101.3001.7020\" target=\"_blank\" class=\"hl hl-1\" data-report-view=\"{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E5%A4%9A%E7%BA%BF%E7%A8%8B&amp;spm=1001.2101.3001.7020&quot;}\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E5%A4%9A%E7%BA%BF%E7%A8%8B&amp;spm=1001.2101.3001.7020&quot;}\" data-tit=\"多线程\" data-pretit=\"多线程\">多线程</a></h1>\r\n<p>Python多线程依赖于标准库<code>threading</code>，线程类<code>Thread</code>的常用方法如下表：</p>\r\n<div class=\"table-box\"><table><thead><tr><th>序号</th><th>方法</th><th>含义</th></tr></thead><tbody><tr><td>1</td><td>start()</td><td>创建一个Thread子线程实例并执行该实例的run()方法</td></tr><tr><td>2</td><td>run()</td><td>子线程需要执行的目标任务</td></tr><tr><td>3</td><td>join()</td><td>主进程阻塞等待子线程直到子线程结束才继续执行，可以设置等待超时时间timeout</td></tr><tr><td>4</td><td>is_alive()</td><td>判断子线程是否终止</td></tr><tr><td>5</td><td>daemon</td><td>设置子线程是否随主进程退出而退出</td></tr></tbody></table></div>\r\n<p>关于线程与进程的关系，还有一个很生动的例子</p>\r\n<blockquote>\r\n <p>把一条公路看作一道进程，那么公路上的各个车道就是进程中的各个线程。这些线程(车道)共享了进程(道路)的公共资源；这些线程(车道)之间可以并发执行(各个车道相对独立)，也可以互相同步(交通信号灯)。</p>\r\n</blockquote>\r\n<p>多线程可以通过<font color=\"#4a86e8\"><strong>线程锁</strong></font>来进行数据同步，可用于保护共享资源同时被多个线程读写引起冲突导致错误。给出一个实例：</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">rsrc <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\r\nlock <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Lock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">task1</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">global</span> rsrc<span class=\"token punctuation\">,</span> lock\r\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">with</span> lock<span class=\"token punctuation\">:</span>\r\n            rsrc <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\r\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"task1:\"</span><span class=\"token punctuation\">,</span> rsrc<span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">return</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"has been done!\"</span>\r\n\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">task2</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">global</span> rsrc<span class=\"token punctuation\">,</span> lock\r\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        lock<span class=\"token punctuation\">.</span>acquire<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n        rsrc <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\r\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"task2:\"</span><span class=\"token punctuation\">,</span> rsrc<span class=\"token punctuation\">)</span>\r\n        lock<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">return</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"has been done!\"</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li><li style=\"color: rgb(153, 153, 153);\">19</li></ul></pre>\r\n<p>结果如下</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/bc4b482dae39475e9bf1cda52728b975.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATXIuV2ludGVyYA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\" height=\"350\"></p>\r\n<p>在多线程并发过程中，若没有控制好线程间的执行逻辑，将可能产生<font color=\"#4a86e8\"><strong>死锁现象</strong></font>，可以使用<code>with</code>关键词在线程访问临界区结束后自动释放锁，也可使用<code>release()</code>方法手动释放句柄。</p>\r\n<h1><a name=\"t4\"></a><a id=\"4__107\"></a>4 协程与多协程</h1>\r\n<p><font color=\"#f00\"><strong>协程适用于I/O密集型而非计算密集型场景</strong></font>。在协程发起I/O请求后返回结果前往往有大量闲置时间——该时间可能用于网络数据传输、获取协议头、服务器查询数据库等，而I/O请求本身并不耗时，因此<font color=\"#f00\"><strong>协程可以发送一个请求后让渡给系统干别的事</strong></font>，这就是协程提高性能的原因。</p>\r\n<p>协程编程的框架如下：</p>\r\n<blockquote>\r\n <ul><li>创建协程对象并将其封装成任务实例；</li><li>创建事件循环实例并监听任务队列；</li><li>获取协程结果(可在事件循环结束后获取，或提前添加回调函数)。</li></ul>\r\n</blockquote>\r\n<p>一个嵌套协程的示例如下：</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-python has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\"><span class=\"token keyword\">import</span> asyncio<span class=\"token punctuation\">,</span> time\r\n\r\n<span class=\"token comment\"># 内层协程</span>\r\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">do_some_work</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\'Waiting: \'</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\r\n    <span class=\"token keyword\">await</span> asyncio<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">return</span> <span class=\"token string\">\'Done after {}s\'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">def</span> <span class=\"token function\">OnCallBack</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 外层协程main</span>\r\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token comment\"># 创建三个协程对象并封装成任务</span>\r\n    task1 <span class=\"token operator\">=</span> asyncio<span class=\"token punctuation\">.</span>ensure_future<span class=\"token punctuation\">(</span>do_some_work<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    task2 <span class=\"token operator\">=</span> asyncio<span class=\"token punctuation\">.</span>ensure_future<span class=\"token punctuation\">(</span>do_some_work<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    task3 <span class=\"token operator\">=</span> asyncio<span class=\"token punctuation\">.</span>ensure_future<span class=\"token punctuation\">(</span>do_some_work<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token comment\"># 添加回调</span>\r\n    task1<span class=\"token punctuation\">.</span>add_done_callback<span class=\"token punctuation\">(</span>OnCallBack<span class=\"token punctuation\">)</span>\r\n    task2<span class=\"token punctuation\">.</span>add_done_callback<span class=\"token punctuation\">(</span>OnCallBack<span class=\"token punctuation\">)</span>\r\n    task3<span class=\"token punctuation\">.</span>add_done_callback<span class=\"token punctuation\">(</span>OnCallBack<span class=\"token punctuation\">)</span>\r\n    <span class=\"token comment\"># 内层任务列表</span>\r\n    tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>task1<span class=\"token punctuation\">,</span> task2<span class=\"token punctuation\">,</span> task3<span class=\"token punctuation\">]</span>\r\n	<span class=\"token comment\"># 将列表转为可等待对象</span>\r\n    dones<span class=\"token punctuation\">,</span> pendings <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> asyncio<span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 外层协程func</span>\r\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\r\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"func:\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token comment\"># 外层任务列表</span>\r\ntasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>asyncio<span class=\"token punctuation\">.</span>ensure_future<span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> asyncio<span class=\"token punctuation\">.</span>ensure_future<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\r\n<span class=\"token comment\"># 创建事件循环</span>\r\nloop <span class=\"token operator\">=</span> asyncio<span class=\"token punctuation\">.</span>get_event_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\nstart <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token comment\"># 监听异步任务</span>\r\nloop<span class=\"token punctuation\">.</span>run_until_complete<span class=\"token punctuation\">(</span>asyncio<span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\r\nend <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"总耗时:\"</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li><li style=\"color: rgb(153, 153, 153);\">19</li><li style=\"color: rgb(153, 153, 153);\">20</li><li style=\"color: rgb(153, 153, 153);\">21</li><li style=\"color: rgb(153, 153, 153);\">22</li><li style=\"color: rgb(153, 153, 153);\">23</li><li style=\"color: rgb(153, 153, 153);\">24</li><li style=\"color: rgb(153, 153, 153);\">25</li><li style=\"color: rgb(153, 153, 153);\">26</li><li style=\"color: rgb(153, 153, 153);\">27</li><li style=\"color: rgb(153, 153, 153);\">28</li><li style=\"color: rgb(153, 153, 153);\">29</li><li style=\"color: rgb(153, 153, 153);\">30</li><li style=\"color: rgb(153, 153, 153);\">31</li><li style=\"color: rgb(153, 153, 153);\">32</li><li style=\"color: rgb(153, 153, 153);\">33</li><li style=\"color: rgb(153, 153, 153);\">34</li><li style=\"color: rgb(153, 153, 153);\">35</li><li style=\"color: rgb(153, 153, 153);\">36</li><li style=\"color: rgb(153, 153, 153);\">37</li><li style=\"color: rgb(153, 153, 153);\">38</li><li style=\"color: rgb(153, 153, 153);\">39</li><li style=\"color: rgb(153, 153, 153);\">40</li></ul></pre>\r\n<h1><a name=\"t5\"></a><a id=\"5__159\"></a>5 总结</h1>\r\n<p>看了这么多概念可能有点晕了，下面这张表总结了本文的内容。总得来说，进程、线程、协程各有各的应用场景，不能说多进程、多线程、多协程就一定好，而是要根据具体的使用情况来确定。</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/83339508446d4f898886bc2bc6ee1e80.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBATXIuV2ludGVyYA==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center\" alt=\"在这里插入图片描述\"></p>\r\n<hr color=\"#FFF\" size=\"1&quot;\">\r\n<p>🔥 <strong>更多精彩专栏</strong>：</p>\r\n<ul><li><a href=\"https://blog.csdn.net/frigidwinter/category_11410243.html\">《机器人原理与技术》</a></li><li><a href=\"https://blog.csdn.net/frigidwinter/category_11541346.html\">《ROS从入门到精通》</a></li><li><a href=\"https://blog.csdn.net/frigidwinter/category_11195510.html\">《计算机视觉教程》</a></li><li><a href=\"https://blog.csdn.net/frigidwinter/category_10302228.html\">《机器学习》</a></li><li><a href=\"https://blog.csdn.net/frigidwinter/category_11493076.html?spm=1001.2014.3001.5482\">《数值优化方法》</a></li><li>…</li></ul>\r\n<p>🏠 <strong>欢迎加入社区和更多志同道合的朋友交流</strong>：<a href=\"https://bbs.csdn.net/forums/learn-ai\">AI 技术社</a><br> <br></p>\r\n<center>\r\n 👇配套代码 · 优质体验 · 系统知识 请关注👇\r\n</center>\r\n                </div><div><div></div></div>\r\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-3fd7f7a902.css\" rel=\"stylesheet\">\r\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-49037e4d27.css\" rel=\"stylesheet\">\r\n        </div>\r\n        <div id=\"treeSkill\" style=\"display: block;\"><div class=\"skill-tree-box\"><div class=\"skill-tree-head\">文章知识点与官方知识档案匹配，可进一步学习相关知识</div><div class=\"skill-tree-body\"><div class=\"skill-tree-item\"><span class=\"skill-tree-href\"><a data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.6866&quot;,&quot;dest&quot;:&quot;https://edu.csdn.net/skill/python/python-3-132&quot;}\" href=\"https://edu.csdn.net/skill/python/python-3-132\" target=\"_blank\">Python入门技能树</a><i></i><a data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.6866&quot;,&quot;dest&quot;:&quot;https://edu.csdn.net/skill/python/python-3-132&quot;}\" href=\"https://edu.csdn.net/skill/python/python-3-132\" target=\"_blank\">高级教程</a><i></i><a data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.6866&quot;,&quot;dest&quot;:&quot;https://edu.csdn.net/skill/python/python-3-132&quot;}\" href=\"https://edu.csdn.net/skill/python/python-3-132\" target=\"_blank\">线程进程和协程</a></span><span class=\"skill-tree-con\"><span class=\"skill-tree-count\">48357</span> 人正在系统学习中</span></div></div></div></div>\r\n        <div id=\"blogExtensionBox\" style=\"width:400px;margin:auto;margin-top:12px\" class=\"blog-extension-box\"><div class=\"blog_extension blog_extension_type1\" id=\"blog_extension\">\r\n          <div class=\"blog_extension_card\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.6470&quot;}\">\r\n            <div class=\"blog_extension_card_left\">\r\n            <img src=\"https://img-blog.csdnimg.cn/e3424664547f4e1984a034ea052ba77f.png\" alt=\"\">\r\n          </div>\r\n            <div class=\"blog_extension_card_cont\">\r\n              <div class=\"blog_extension_card_cont_l\">\r\n                <span class=\"text\">AI技术社</span>\r\n                <div class=\"blog_extension_card_cont_r\">\r\n                  <img class=\"weixin\" src=\"https://g.csdnimg.cn/extension-box/1.1.6/image/weixin.png\" alt=\"\">\r\n                  <span>微信公众号</span>\r\n                  <img class=\"go\" src=\"https://g.csdnimg.cn/extension-box/1.1.6/image/ic_move.png\" alt=\"\">\r\n                </div>\r\n              </div>\r\n              <span class=\"style\">趣看智能时代的过去、现在、将来</span>\r\n            </div>\r\n          </div></div></div>\r\n    </article>', '2022-06-05 19:24:34');
INSERT INTO `cms_article` VALUES (10, 4, 'Python学习（4）证件照底色变换', 'admin', '', 1, 7, '<article class=\"baidu_pl\">\r\n        <div id=\"article_content\" class=\"article_content clearfix\" style=\"height: 2000px; overflow: hidden;\">\r\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-163de54645.css\">\r\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-light\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\r\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\r\n                    </svg>\r\n                    <p></p>\r\n<div class=\"toc\">\r\n <h3><a name=\"t0\"></a>Python学习（4）证件照底色变换</h3>\r\n <ul><li><a href=\"#_2\" target=\"_self\">前言</a></li><li><a href=\"#_Python_8\" target=\"_self\">一. Python准备</a></li><li><a href=\"#__Python_19\" target=\"_self\">二. Python仿真</a></li><li><a href=\"#__78\" target=\"_self\">三. 仿真结果</a></li><li><a href=\"#__83\" target=\"_self\">四. 小结</a></li></ul>\r\n</div>\r\n<p></p> \r\n<h1><a name=\"t1\"></a><a id=\"_2\"></a>前言</h1> \r\n<p>随着人工智能研究的不断兴起，Python的应用也在不断上升，由于Python语言的简洁性、易读性以及可扩展性，特别是在开源工具和<a href=\"https://so.csdn.net/so/search?q=%E6%B7%B1%E5%BA%A6&amp;spm=1001.2101.3001.7020\" target=\"_blank\" class=\"hl hl-1\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E6%B7%B1%E5%BA%A6&amp;spm=1001.2101.3001.7020&quot;}\" data-tit=\"深度\" data-pretit=\"深度\">深度</a>学习方向中各种神经网络的应用，使得Python已经成为最受欢迎的程序设计语言之一。由于完全开源，加上简单易学、易读、易维护、以及其可移植性、解释性、可扩展性、可扩充性、可嵌入性：丰富的库等等，自己在学习与工作中也时常接触到Python，这个系列文章的话主要就是介绍一些在Python中常用一些例程进行仿真演示！</p> \r\n<p>一般证件照需要白底，蓝底，或者是红底，网上证件照换底色都是需要付费的，这里来一个简单的python换底色实例。本文例程都是基于Python3.8的环境下进行，所以大家在进行借鉴的时候建议最好在3.8.0版本以上进行仿真。</p> \r\n<h1><a name=\"t2\"></a><a id=\"_Python_8\"></a>一. Python准备</h1> \r\n<p>如何确定自己安装好了python</p> \r\n<p>win+R输入cmd进入命令行程序<br> <img src=\"https://img-blog.csdnimg.cn/78f32c99903b4164a1ff3861c711b2bf.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbW96dW4yMDIw,size_13,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 点击“确定”<br> <img src=\"https://img-blog.csdnimg.cn/f90a3b04e90249a28ad1a2366160696f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbW96dW4yMDIw,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 输入：python，回车<br> <img src=\"https://img-blog.csdnimg.cn/5cecd6d26e66430499f8a6f764d1922e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbW96dW4yMDIw,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 看到Python相关的版本信息，说明Python安装成功。</p> \r\n<h1><a name=\"t3\"></a><a id=\"__Python_19\"></a>二. Python仿真</h1> \r\n<p>新建一个.py文件，输入以下代码，图片也放在与.py文件同级文件夹下</p> \r\n<pre class=\"prettyprint\"><code class=\"prism language-cpp has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">#<span class=\"token operator\">!</span><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>env python\r\n# <span class=\"token operator\">-</span><span class=\"token operator\">*</span><span class=\"token operator\">-</span> coding<span class=\"token operator\">:</span>utf<span class=\"token operator\">-</span><span class=\"token number\">8</span> <span class=\"token operator\">-</span><span class=\"token operator\">*</span><span class=\"token operator\">-</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token module\">cv2</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token module\">numpy</span> as np\r\nfile<span class=\"token operator\">=</span>r<span class=\"token string\">\"src.jpg\"</span>\r\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">step</span><span class=\"token expression\"><span class=\"token number\">1</span><span class=\"token operator\">:</span>读取照片</span></span>\r\nimg <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span><span class=\"token function\">imread</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\r\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">step</span><span class=\"token expression\"><span class=\"token number\">1.2</span><span class=\"token operator\">:</span>缩放图片<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span></span>\r\nimg <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> None<span class=\"token punctuation\">,</span> fx<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> fy<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span>\r\nrows<span class=\"token punctuation\">,</span> cols<span class=\"token punctuation\">,</span> channels <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>shape\r\n# 展示图片\r\ncv2<span class=\"token punctuation\">.</span><span class=\"token function\">imshow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"original...\"</span><span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">)</span>\r\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">step</span><span class=\"token expression\"><span class=\"token number\">2.1</span> 图片转换为灰度图并显示</span></span>\r\nhsv <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span><span class=\"token function\">cvtColor</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> cv2<span class=\"token punctuation\">.</span>COLOR_BGR2HSV<span class=\"token punctuation\">)</span>\r\n# <span class=\"token operator\">:</span>图片的二值化处理\r\n# 红底变蓝底\r\n# 将在两个阈值内的像素值设置为白色（<span class=\"token number\">255</span>），\r\n#而不在阈值区间内的像素值设置为黑色（<span class=\"token number\">0</span>）\r\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> \r\n<span class=\"token directive keyword\">lower</span><span class=\"token expression\">_red<span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">125</span><span class=\"token punctuation\">,</span><span class=\"token number\">125</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span></span>\r\nupper_red <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\nmask <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span><span class=\"token function\">inRange</span><span class=\"token punctuation\">(</span>hsv<span class=\"token punctuation\">,</span> lower_red<span class=\"token punctuation\">,</span> upper_red<span class=\"token punctuation\">)</span> \r\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">step</span><span class=\"token expression\"><span class=\"token number\">2.3</span><span class=\"token operator\">:</span>腐蚀膨胀 若是腐蚀膨胀后仍有白色噪点，可以增加iterations的值</span></span>\r\nerode <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span><span class=\"token function\">erode</span><span class=\"token punctuation\">(</span>mask<span class=\"token punctuation\">,</span> None<span class=\"token punctuation\">,</span> iterations<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">cv</span><span class=\"token expression\"><span class=\"token number\">2.</span><span class=\"token function\">imshow</span><span class=\"token punctuation\">(</span></span><span class=\"token char\">\'erode\'</span><span class=\"token expression\"><span class=\"token punctuation\">,</span> erode<span class=\"token punctuation\">)</span></span></span>\r\ndilate <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span><span class=\"token function\">dilate</span><span class=\"token punctuation\">(</span>erode<span class=\"token punctuation\">,</span> None<span class=\"token punctuation\">,</span> iterations<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> \r\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">step</span><span class=\"token expression\"><span class=\"token number\">3</span>遍历每个像素点，进行颜色的替换</span></span>\r\n\r\n#若是想要将红底变成蓝底img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>，\r\n#若是想将蓝底变为红底则img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n#若是想变白底img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\r\n\r\n<span class=\"token keyword\">for</span> i in <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>rows<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\r\n    <span class=\"token keyword\">for</span> j in <span class=\"token function\">range</span><span class=\"token punctuation\">(</span>cols<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\r\n        <span class=\"token keyword\">if</span> dilate<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span><span class=\"token number\">255</span><span class=\"token operator\">:</span> # 像素点<span class=\"token number\">255</span>表示白色<span class=\"token punctuation\">,</span><span class=\"token number\">180</span>为灰度\r\n            img<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> # 此处替换颜色，为BGR通道，不是RGB通道 \r\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">step</span><span class=\"token expression\"><span class=\"token number\">4</span> 显示图像</span></span>\r\nnew_file<span class=\"token operator\">=</span>r<span class=\"token string\">\"dst.jpg\"</span>\r\ncv2<span class=\"token punctuation\">.</span><span class=\"token function\">imwrite</span><span class=\"token punctuation\">(</span>new_file<span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">)</span>\r\nres <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span><span class=\"token function\">imread</span><span class=\"token punctuation\">(</span>new_file<span class=\"token punctuation\">)</span>\r\ncv2<span class=\"token punctuation\">.</span><span class=\"token function\">imshow</span><span class=\"token punctuation\">(</span><span class=\"token char\">\'result...\'</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\r\n# 窗口等待的命令，<span class=\"token number\">0</span>表示无限等待\r\ncv2<span class=\"token punctuation\">.</span><span class=\"token function\">waitKey</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\r\n\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li><li style=\"color: rgb(153, 153, 153);\">16</li><li style=\"color: rgb(153, 153, 153);\">17</li><li style=\"color: rgb(153, 153, 153);\">18</li><li style=\"color: rgb(153, 153, 153);\">19</li><li style=\"color: rgb(153, 153, 153);\">20</li><li style=\"color: rgb(153, 153, 153);\">21</li><li style=\"color: rgb(153, 153, 153);\">22</li><li style=\"color: rgb(153, 153, 153);\">23</li><li style=\"color: rgb(153, 153, 153);\">24</li><li style=\"color: rgb(153, 153, 153);\">25</li><li style=\"color: rgb(153, 153, 153);\">26</li><li style=\"color: rgb(153, 153, 153);\">27</li><li style=\"color: rgb(153, 153, 153);\">28</li><li style=\"color: rgb(153, 153, 153);\">29</li><li style=\"color: rgb(153, 153, 153);\">30</li><li style=\"color: rgb(153, 153, 153);\">31</li><li style=\"color: rgb(153, 153, 153);\">32</li><li style=\"color: rgb(153, 153, 153);\">33</li><li style=\"color: rgb(153, 153, 153);\">34</li><li style=\"color: rgb(153, 153, 153);\">35</li><li style=\"color: rgb(153, 153, 153);\">36</li><li style=\"color: rgb(153, 153, 153);\">37</li><li style=\"color: rgb(153, 153, 153);\">38</li><li style=\"color: rgb(153, 153, 153);\">39</li><li style=\"color: rgb(153, 153, 153);\">40</li><li style=\"color: rgb(153, 153, 153);\">41</li><li style=\"color: rgb(153, 153, 153);\">42</li><li style=\"color: rgb(153, 153, 153);\">43</li><li style=\"color: rgb(153, 153, 153);\">44</li></ul></pre> \r\n<p>保存.py文件为test2a.py<br> 输入eixt()退出python，输入命令行进入工程文件目录<br> <img src=\"https://img-blog.csdnimg.cn/5db4aad318fc47f5be008711fc850651.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAbW96dW4yMDIw,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 输入以下命令，跑起工程</p> \r\n<pre class=\"prettyprint\"><code class=\"prism language-cpp has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">python test2a<span class=\"token punctuation\">.</span>py\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li></ul></pre> \r\n<p>没有报错，直接弹出图片，运行成功！</p> \r\n<h1><a name=\"t4\"></a><a id=\"__78\"></a>三. 仿真结果</h1> \r\n<p><img src=\"https://img-blog.csdnimg.cn/df153a1b70e24cd8a5804fbc32462c8d.png\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/f5404644f35b4790abaa951160075d4d.png\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/3370e4cd51344f08b97847a909b3b08c.png\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/65fe99cebad34c02a42109c536f21f45.png\" alt=\"在这里插入图片描述\"></p> \r\n<h1><a name=\"t5\"></a><a id=\"__83\"></a>四. 小结</h1> \r\n<p>在Python中调用OpenCV库进行图片读取，简单灰度化处理，通过腐蚀膨胀，确定背景区域，再进行填充即可，比较简单的一个例程，后续还会介绍一些其他的常用小功能小技巧，主要还是在图像处理与语音信号处理方向。每天学一个Python小知识，大家一起来学习进步阿！</p>\r\n                </div>\r\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-3fd7f7a902.css\" rel=\"stylesheet\">\r\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-49037e4d27.css\" rel=\"stylesheet\">\r\n        </div>\r\n        <div id=\"treeSkill\" data-report-view=\"{&quot;spm&quot;:&quot;1001.2101.3001.6866&quot;}\" style=\"display: block;\"><div class=\"skill-tree-box\"><div class=\"skill-tree-head\">文章知识点与官方知识档案匹配，可进一步学习相关知识</div><div class=\"skill-tree-body\"><div class=\"skill-tree-item\"><span class=\"skill-tree-href\"><a data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.6866&quot;,&quot;dest&quot;:&quot;https://edu.csdn.net/skill/python/python-3-247&quot;}\" href=\"https://edu.csdn.net/skill/python/python-3-247\" target=\"_blank\">Python入门技能树</a><i></i><a data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.6866&quot;,&quot;dest&quot;:&quot;https://edu.csdn.net/skill/python/python-3-247&quot;}\" href=\"https://edu.csdn.net/skill/python/python-3-247\" target=\"_blank\">人工智能</a><i></i><a data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.6866&quot;,&quot;dest&quot;:&quot;https://edu.csdn.net/skill/python/python-3-247&quot;}\" href=\"https://edu.csdn.net/skill/python/python-3-247\" target=\"_blank\">计算机视觉</a></span><span class=\"skill-tree-con\"><span class=\"skill-tree-count\">48357</span> 人正在系统学习中</span></div></div></div></div>\r\n    </article>', '2022-06-05 19:25:08');
INSERT INTO `cms_article` VALUES (11, 3, 'pycharm从安装到全副武装，学起来才嗖嗖的快，图片超多，因为过度详细！', 'admin', '', 1, 82, '<article class=\"baidu_pl\">\r\n        <div id=\"article_content\" class=\"article_content clearfix\">\r\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-163de54645.css\">\r\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-light\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\r\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\r\n                    </svg>\r\n                    <p></p>\r\n<div class=\"toc\">\r\n <h3><a name=\"t0\"></a>文章目录</h3>\r\n <ul><li><ul><li><a href=\"#_1\" target=\"_self\">推荐系列教程，推荐的一定是好的！</a></li><li><a href=\"#0_10\" target=\"_self\">0.前言</a></li><li><a href=\"#pycharm_12\" target=\"_self\">一.pycharm下载安装</a></li><li><a href=\"#python_32\" target=\"_self\">二.python下载安装</a></li><li><a href=\"#pycharmpython_52\" target=\"_self\">三.pycharm上配置python</a></li><li><a href=\"#_69\" target=\"_self\">四.配置镜像源让你下载嗖嗖的快</a></li><li><ul><li><a href=\"#pycharm_78\" target=\"_self\">一.pycharm内部配置</a></li><li><a href=\"#_105\" target=\"_self\">二.手动添加镜像源</a></li><li><a href=\"#_124\" target=\"_self\">三.永久配置镜像源</a></li></ul>\r\n   </li><li><a href=\"#_144\" target=\"_self\">五.插件安装（比如汉化？）</a></li><li><ul><li><a href=\"#51_149\" target=\"_self\">5.1自动补码神器第一款</a></li><li><a href=\"#52pycharm_161\" target=\"_self\">5.2汉化pycharm</a></li><li><a href=\"#53_178\" target=\"_self\">5.3其它插件</a></li></ul>\r\n   </li><li><a href=\"#_180\" target=\"_self\">六.美女背景</a></li><li><a href=\"#_186\" target=\"_self\">七.自定义脚本开头</a></li></ul>\r\n </li></ul>\r\n</div>\r\n<p></p>\r\n<h2><a name=\"t1\"></a><a id=\"_1\"></a>推荐系列教程，推荐的一定是好的！</h2>\r\n<p><a href=\"https://chuanchuan.blog.csdn.net/article/details/119852902\">十万字python基础教程，学不会主页联系找我！</a></p>\r\n<p><a href=\"https://blog.csdn.net/weixin_46211269/category_10912318.html\">qq机器人制作系列讲解专栏</a><br> <a href=\"https://space.bilibili.com/591228087\">qq机器人b站视频教程</a></p>\r\n<p><a href=\"https://chuanchuan.blog.csdn.net/article/details/119814777\">三万字SQL数据库讲解系列</a></p>\r\n<p><a href=\"https://blog.csdn.net/weixin_46211269/category_11242184.html\">数学建模小白到精通系列</a></p>\r\n<h2><a name=\"t2\"></a><a id=\"0_10\"></a>0.前言</h2>\r\n<p>你可能接下来会看到很多图片，因为我截图十分详细了每一步，保证每一个人看懂，所以图很多。中途也遇到了小问题，不要担心，我都有解决。</p>\r\n<h2><a name=\"t3\"></a><a id=\"pycharm_12\"></a>一.pycharm下载安装</h2>\r\n<p>pycharm下载地址：<br> <code>http://www.jetbrains.com/pycharm/download/#section=windows</code><br> 下载详细步骤：<br> 1-<br> <img src=\"https://img-blog.csdnimg.cn/b9fb1c63aee6482b91232623edca12c2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_53,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 2-<br> <img src=\"https://img-blog.csdnimg.cn/61bfe722b0264761bd3eacdc06f48324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_41,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 3-<br> <img src=\"https://img-blog.csdnimg.cn/bbf0b0fa978b40f4966781491ddfe747.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_38,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 4-<br> <img src=\"https://img-blog.csdnimg.cn/eee267ee82494a269df43acd1811fe3e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_34,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 5-<br> <img src=\"https://img-blog.csdnimg.cn/536e67c2d3584b309fc9437fa939b961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_39,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 6<br> <img src=\"https://img-blog.csdnimg.cn/788e88c9c2a34cc487c74d3fda095478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_19,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 7-<br> <img src=\"https://img-blog.csdnimg.cn/6196065a78e24099b7912042d6903134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_36,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 8-直接finish<br> <img src=\"https://img-blog.csdnimg.cn/23e8e8c10b1e4a0fa316cf704c26d4d4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_31,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\r\n<h2><a name=\"t4\"></a><a id=\"python_32\"></a>二.python下载安装</h2>\r\n<p>9-python官网：</p>\r\n<pre class=\"prettyprint\"><code class=\"has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">https://www.python.org/\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li></ul></pre>\r\n<p>进去网址后点击：<br> <img src=\"https://img-blog.csdnimg.cn/efe3e80d244449df8c03b155dbad59b5.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_40,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 10<br> <img src=\"https://img-blog.csdnimg.cn/d1cfaca1f2dd41f1844a8a10b4dd2282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_42,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 11-下载好后<br> <img src=\"https://img-blog.csdnimg.cn/2900c9f423704e5eb59f6261012847b0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_38,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 12-添加环境变量<br> <img src=\"https://img-blog.csdnimg.cn/a9f91ddc0cd74abbb63c9f3bddd261cc.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_41,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/77b81ae092a6424fb9387cae12ffe150.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_29,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/bc799ca9e8644285ad4343ae27e713ba.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_28,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/8afa4975ffa5425581a6eb4095c16ecd.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_31,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/832d5124a75c4c8b94476bfcf94522c0.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_28,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 记得双击安装：<br> <img src=\"https://img-blog.csdnimg.cn/0700430218f049ad853cde0f0d1bb34b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_37,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\r\n<h2><a name=\"t5\"></a><a id=\"pycharmpython_52\"></a>三.pycharm上配置python</h2>\r\n<p>13-双击桌面pycharm</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/3277d996662a4aa5900b4a185c7b2db3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_35,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 随便取个名字（我取的学习），直接点击create.<br> 遇到如下情况，则点击ok(没遇到就算了)<br> <img src=\"https://img-blog.csdnimg.cn/5a671f835f794cb8ba0bbc6becb44271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_33,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 14-添加解释器<br> <img src=\"https://img-blog.csdnimg.cn/1297fb97e8854bc8a532637309740518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_47,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/58d73547b8184f4bbd4baba25165a58a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_40,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/9ae6ffdd6b5d4d98a68500d1d2a825b6.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_41,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/5bed742d838141f3bc4006871da5b589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_36,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/190aff408b35442f862381db88f509c2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_38,color_FFFFFF,t_70,g_se,x_16\" alt=\"![在这里插入图片描述](https://img-blog.csdnimg.cn/4f4c5fc9f8b64ecebbf4c1046e876036.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_36,color_FFFFFF,t_70,g_se,x_16\"><br> 成功如下：<br> <img src=\"https://img-blog.csdnimg.cn/449e764716054b2f855622155e43e30c.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_36,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 打印成功：标志配置完成<br> <img src=\"https://img-blog.csdnimg.cn/4c9fe6deccaf41bc98aa32b8ed5893ef.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBA5bed5bed6I-c6bif,size_40,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\r\n<h2><a name=\"t6\"></a><a id=\"_69\"></a>四.配置镜像源让你下载嗖嗖的快</h2>\r\n<p>我喜欢用清华的，所以我在这里介绍都用清华源，当然这里是一些比较好用的镜像源：</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-c has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">清华：https<span class=\"token operator\">:</span><span class=\"token comment\">//pypi.tuna.tsinghua.edu.cn/simple</span>\r\n阿里云：http<span class=\"token operator\">:</span><span class=\"token comment\">//mirrors.aliyun.com/pypi/simple/</span>\r\n中国科技大学 https<span class=\"token operator\">:</span><span class=\"token comment\">//pypi.mirrors.ustc.edu.cn/simple/</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li></ul></pre>\r\n<p>一共有三种镜像源配置，建议你每一种都跟我一起学会。</p>\r\n<h3><a name=\"t7\"></a><a id=\"pycharm_78\"></a>一.pycharm内部配置</h3>\r\n<p>第一步：<br> <img src=\"https://img-blog.csdnimg.cn/602abee494d24f468f990d2302c302bb.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 第二步：<br> <img src=\"https://img-blog.csdnimg.cn/35b4f83c6c2d42488a7acd31c80795ff.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 第三步：<br> <img src=\"https://img-blog.csdnimg.cn/51315de64d1b4adbaa61d685edef0b5b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/a6d60c5b1fc24c28bf92d02288862a3d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 第四步：<br> 复制上面的清华镜像源粘贴，然后okokokok<br> <img src=\"https://img-blog.csdnimg.cn/b25a46107cf14264b89e328714efd7d5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 测试，遇到了这个问题：<br> pip : 无法将“pip”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确，然后再试一次。<br> <img src=\"https://img-blog.csdnimg.cn/ddcfdfef13e04d118dfbcee993073933.png\" alt=\"在这里插入图片描述\"><br> 因为我忘记给pip加环境变量了，所以加一下，一次如下：</p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/440e8911122d415b97cc4425515e5dab.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/e4a2b83794514989ab5d7a55b73331e9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/917877850bdf4bbda845fc3a4654131d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/f38ecf25b3d5423cba3807c1860b1b1d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/cdc83ea514fc41398ab786de3f1e32d1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 第五步：<br> 退出pycharm,因为加了环境变量需要重启软件。我们先到cmd输入pip,如下就是配置成功了：<br> <img src=\"https://img-blog.csdnimg.cn/7192975c7d984522a08776dd5fabf300.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 第六步：<br> 重启软件后，随便装一个模块，如下：（你可以看到下载模块速度很快！）<br> <img src=\"https://img-blog.csdnimg.cn/445a4f6e53044e3bbbd0d78f81fa4fad.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\r\n<h3><a name=\"t8\"></a><a id=\"_105\"></a>二.手动添加镜像源</h3>\r\n<p>使用方法：</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-c has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">pip install 下载的模块名 <span class=\"token operator\">-</span>i https<span class=\"token operator\">:</span><span class=\"token comment\">//pypi.tuna.tsinghua.edu.cn/simple</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li></ul></pre>\r\n<p>比如我要下载numpy这个模块，执行以下命令：</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-c has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">pip install numpy <span class=\"token operator\">-</span>i https<span class=\"token operator\">:</span><span class=\"token comment\">//pypi.tuna.tsinghua.edu.cn/simple</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li></ul></pre>\r\n<p>几秒就好了：<br> <img src=\"https://img-blog.csdnimg.cn/4263e85e32444c38b7e6a0ce76f5f410.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 这个方法的好处就是，你不用像其它配置一样要去配置一遍，你只需要在后面加上：</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-c has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\"><span class=\"token operator\">-</span>i https<span class=\"token operator\">:</span><span class=\"token comment\">//pypi.tuna.tsinghua.edu.cn/simple</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li></ul></pre>\r\n<h3><a name=\"t9\"></a><a id=\"_124\"></a>三.永久配置镜像源</h3>\r\n<p>这个配置我是建议你一定要添加配置。<br> <strong>方法一：</strong><br> 到cmd执行如下命令创建pip.ini:</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-c has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\">pip config set global<span class=\"token punctuation\">.</span>index<span class=\"token operator\">-</span>url https<span class=\"token operator\">:</span><span class=\"token comment\">//pypi.tuna.tsinghua.edu.cn/simple</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li></ul></pre>\r\n<p>返回：<br> <img src=\"https://img-blog.csdnimg.cn/36109144db0b466695e064fe8de57734.png\" alt=\"在这里插入图片描述\"></p>\r\n<p>然后我们把这个路径添加到系统环境变量就好了（怎么添加环境变量？跟前面给pip添加环境变量一样操作，只是路径不一样）</p>\r\n<p><strong>方法二：</strong><br> 如果刚刚这个命令你执行失败，你可以自己在c盘创建一个文件名叫做pip，pip文件夹下创建一个文件名pip.ini,内容为：</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-c has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\"><span class=\"token punctuation\">[</span>global<span class=\"token punctuation\">]</span>\r\nindex<span class=\"token operator\">-</span>url <span class=\"token operator\">=</span> https<span class=\"token operator\">:</span><span class=\"token comment\">//pypi.tuna.tsinghua.edu.cn/simple</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li></ul></pre>\r\n<p>还是一样添加到环境变量。</p>\r\n<h2><a name=\"t10\"></a><a id=\"_144\"></a>五.插件安装（比如汉化？）</h2>\r\n<p>首先个人不建议汉化，最后我再演示汉化插件。我是想要推荐一些不错的插件。<br> 首先进入如下界面：<br> <img src=\"https://img-blog.csdnimg.cn/96587fadd3f84e7a8aa2bdf3dc16f336.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\r\n<h3><a name=\"t11\"></a><a id=\"51_149\"></a>5.1自动补码神器第一款</h3>\r\n<p>推荐使用：TabNine，当然kite也不错，你可以都安装，我是都在用。我演示一款：<br> <img src=\"https://img-blog.csdnimg.cn/be3d641d502343059f4e3dfdb59a872f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/88e07cfb59534d97a99aeb7747f17207.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/0b672e7816d6473096a532b72397ea3c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/f2037bea69fd485e9bf7453c5d71bb03.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/8211e5bc4b3c4b2bb4d009afcb8b0e91.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 弹出这个页面删了不要管：<br> <img src=\"https://img-blog.csdnimg.cn/bd1466d92f9645d1b6a93f092d47b0d5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> 测试：已经开始有提示了<br> <img src=\"https://img-blog.csdnimg.cn/68267655a6da44a8b31e078e3a77b513.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\r\n<h3><a name=\"t12\"></a><a id=\"52pycharm_161\"></a>5.2汉化pycharm</h3>\r\n<p>首先，个人不建议汉化，不管你英语好不好，都要去适应这个英语界面，当然你实在需要汉化，这是教程：<br> <img src=\"https://img-blog.csdnimg.cn/1b72b83fab1745929950644cce80d8c9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/1fbc5d757db549cea4371308090cd989.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/20c3caff7521466ea8d47189b8cebd63.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"><br> <img src=\"https://img-blog.csdnimg.cn/05c14d5214334174a185e11c165160d6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\r\n<p>现在就已经全部汉化：<br> <img src=\"https://img-blog.csdnimg.cn/380d5aff59444edfb7ec3ebc0f964715.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\r\n<p><img src=\"https://img-blog.csdnimg.cn/0a038d80fe7f4e9e90f9a7bdd000e943.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\r\n<h3><a name=\"t13\"></a><a id=\"53_178\"></a>5.3其它插件</h3>\r\n<p>如果需要下载别的插件，你可以百度搜一下pycharm有哪些好的插件，都是安装上述方式安装。</p>\r\n<h2><a name=\"t14\"></a><a id=\"_180\"></a>六.美女背景</h2>\r\n<p>你是否想要如下桌面？<br> <img src=\"https://img-blog.csdnimg.cn/9a13bbd0dec84b34b615588f47ebe8e0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5bed5bed6I-c6bif,size_20,color_FFFFFF,t_70,g_se,x_16\" alt=\"在这里插入图片描述\"></p>\r\n<p>教程传送门：<br> <a href=\"https://chuanchuan.blog.csdn.net/article/details/119854359\">美女桌面背景设置</a></p>\r\n<h2><a name=\"t15\"></a><a id=\"_186\"></a>七.自定义脚本开头</h2>\r\n<p>你是都在先每次创建一个文件，开头都是如下？<br> <img src=\"https://img-blog.csdnimg.cn/fcd6f158ff184c61804896c7760a7897.png\" alt=\"在这里插入图片描述\"><br> 教程传送门：<br> <a href=\"https://chuanchuan.blog.csdn.net/article/details/119833979\">自定义脚本开头</a></p>\r\n                </div><div data-report-view=\"{&quot;mod&quot;:&quot;1585297308_001&quot;,&quot;spm&quot;:&quot;1001.2101.3001.6548&quot;,&quot;dest&quot;:&quot;https://chuanchuan.blog.csdn.net/article/details/119934323&quot;,&quot;extend1&quot;:&quot;pc&quot;,&quot;ab&quot;:&quot;new&quot;}\"><div></div></div>\r\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-3fd7f7a902.css\" rel=\"stylesheet\">\r\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-49037e4d27.css\" rel=\"stylesheet\">\r\n        </div>\r\n        <div id=\"treeSkill\" data-report-view=\"{&quot;spm&quot;:&quot;1001.2101.3001.6866&quot;}\" style=\"display: block;\"><div class=\"skill-tree-box\"><div class=\"skill-tree-head\">文章知识点与官方知识档案匹配，可进一步学习相关知识</div><div class=\"skill-tree-body\"><div class=\"skill-tree-item\"><span class=\"skill-tree-href\"><a data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.6866&quot;,&quot;dest&quot;:&quot;https://edu.csdn.net/skill/python/python-3-4&quot;}\" href=\"https://edu.csdn.net/skill/python/python-3-4\" target=\"_blank\">Python入门技能树</a><i></i><a data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.6866&quot;,&quot;dest&quot;:&quot;https://edu.csdn.net/skill/python/python-3-4&quot;}\" href=\"https://edu.csdn.net/skill/python/python-3-4\" target=\"_blank\">预备知识</a><i></i><a data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.6866&quot;,&quot;dest&quot;:&quot;https://edu.csdn.net/skill/python/python-3-4&quot;}\" href=\"https://edu.csdn.net/skill/python/python-3-4\" target=\"_blank\">常用开发工具</a></span><span class=\"skill-tree-con\"><span class=\"skill-tree-count\">48337</span> 人正在系统学习中</span></div></div></div></div>\r\n        <div id=\"blogVoteBox\" style=\"width:400px;margin:auto;margin-top:12px\" class=\"blog-vote-box\"></div>\r\n        <div id=\"blogExtensionBox\" style=\"width:400px;margin:auto;margin-top:12px\" class=\"blog-extension-box\"><div class=\"blog_extension blog_extension_type1\" id=\"blog_extension\">\r\n          <div class=\"blog_extension_card\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.6470&quot;}\" data-report-view=\"{&quot;spm&quot;:&quot;1001.2101.3001.6470&quot;}\">\r\n            <div class=\"blog_extension_card_left\">\r\n            <img src=\"https://img-blog.csdnimg.cn/0cdf5e1873434af493bca69ea7760d4e.jpg\" alt=\"\">\r\n          </div>\r\n            <div class=\"blog_extension_card_cont\">\r\n              <div class=\"blog_extension_card_cont_l\">\r\n                <span class=\"text\">玩转大数据</span>\r\n                <div class=\"blog_extension_card_cont_r\">\r\n                  <img class=\"weixin\" src=\"https://g.csdnimg.cn/extension-box/1.1.6/image/weixin.png\" alt=\"\">\r\n                  <span>微信公众号</span>\r\n                  <img class=\"go\" src=\"https://g.csdnimg.cn/extension-box/1.1.6/image/ic_move.png\" alt=\"\">\r\n                </div>\r\n              </div>\r\n              <span class=\"style\">让天下没有难学的python</span>\r\n            </div>\r\n          </div></div></div>\r\n    </article>', '2022-06-05 19:25:19');
INSERT INTO `cms_article` VALUES (12, 2, '【数据结构】什么是哈希表？为什么哈希表的查询时间复杂度是O(1)?', 'admin', '', 1, 113, '<article class=\"baidu_pl\">\r\n        <div id=\"article_content\" class=\"article_content clearfix\" style=\"height: 2000px; overflow: hidden;\">\r\n        <link rel=\"stylesheet\" href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/ck_htmledit_views-163de54645.css\">\r\n                <div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\">\r\n                        <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path>\r\n                    </svg>\r\n                    <hr>\r\n<p><code>大家好，我是卷心菜，可以叫我菜菜，大二学生一枚。本篇主要讲解一种数据结构：哈希表。如果您看完文章有所收获，可以三连支持博主哦~，嘻嘻。</code></p>\r\n<hr>\r\n<p></p>\r\n<div class=\"toc\">\r\n <h3><a name=\"t0\"></a>文章目录</h3>\r\n <ul><li><a href=\"#_10\" target=\"_self\">一、前言</a></li><li><a href=\"#_17\" target=\"_self\">二、数组</a></li><li><a href=\"#_26\" target=\"_self\">三、哈希表</a></li><li><ul><li><a href=\"#1_27\" target=\"_self\">1、百度百科</a></li><li><a href=\"#2_33\" target=\"_self\">2、问题引用</a></li><li><a href=\"#3_42\" target=\"_self\">3、哈希函数</a></li><li><a href=\"#4_51\" target=\"_self\">4、哈希表结构</a></li><li><a href=\"#5_57\" target=\"_self\">5、举例分析</a></li><li><a href=\"#6_63\" target=\"_self\">6、哈希冲突</a></li><li><a href=\"#7_68\" target=\"_self\">7、哈希表的优缺点</a></li></ul>\r\n </li></ul>\r\n</div>\r\n<p></p>\r\n<h1><a name=\"t1\"></a><a id=\"_10\"></a>一、前言</h1>\r\n<ul><li> <p>实话实说，我算法贼菜，为了提高自己的算法能力，自己也是慢慢开始积累刷题经验，在做题中学习<a href=\"https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&amp;spm=1001.2101.3001.7020\" target=\"_blank\" class=\"hl hl-1\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84&amp;spm=1001.2101.3001.7020&quot;}\" data-tit=\"数据结构\" data-pretit=\"数据结构\">数据结构</a>和算法。<font color=\"#ff00\">为了说明今天所要讲的哈希表这一个数据结构，还是从经典的两数之和开始吧</font></p> </li><li> <p>题目如下，自己第一次写这道题，也是循环遍历，效率可以说是非常的慢，就像评论区那样所说：<font color=\"#ff00\">“有人相爱，有人夜里看海，有人力扣第一题做不出来”</font><img src=\"https://img-blog.csdnimg.cn/41d3d750f9d54b96a15ccad288d74d5f.png\" alt=\"在这里插入图片描述\"></p> </li></ul>\r\n<hr>\r\n<h1><a name=\"t2\"></a><a id=\"_17\"></a>二、数组</h1>\r\n<p>在正式开始讲解哈希表之前，让我们来简单认识一下数组。我们经常使用 <strong>数组</strong>，它也是一种数据结构，<font color=\"#ff00\">那么数组有什么优点呢？</font><br> <img src=\"https://img-blog.csdnimg.cn/30abb4ef4b1147e7806f66e710122ef3.png\" alt=\"在这里插入图片描述\"><br> 简单来说，数组的优点是：我们可以通过数组的下标快速定位到该位置下的数值，获取这个数值是非常非常的快， O(1)级别的<a href=\"https://so.csdn.net/so/search?q=%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6&amp;spm=1001.2101.3001.7020\" target=\"_blank\" class=\"hl hl-1\" data-report-view=\"{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6&amp;spm=1001.2101.3001.7020&quot;}\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.7020&quot;,&quot;dest&quot;:&quot;https://so.csdn.net/so/search?q=%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6&amp;spm=1001.2101.3001.7020&quot;}\" data-tit=\"时间复杂度\" data-pretit=\"时间复杂度\">时间复杂度</a>。<font color=\"#ff00\">而哈希表的出现，就很好的解决了这个问题。</font></p>\r\n<p>但是大家有没有想过，如果我们不知道该数值的下标，想要获取这个值，只能通过从头遍历数组，这时候，查询的时间复杂度就是O(N)级别的</p>\r\n<hr>\r\n<h1><a name=\"t3\"></a><a id=\"_26\"></a>三、哈希表</h1>\r\n<h2><a name=\"t4\"></a><a id=\"1_27\"></a>1、百度百科</h2>\r\n<p>哈希表（Hash table，也叫散列表），<font color=\"#ff00\">是根据关键码值(Key value)而直接进行访问的数据结构</font>。也就是说，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。<font color=\"#ff00\">这个映射函数叫做散列函数(哈希函数)，存放记录的数组叫做哈希表。</font>给定表M，存在函数f(key)，对任意给定的关键字值key，代入函数后若能得到包含该关键字的记录在表中的地址，则称表M为哈希（Hash）表，函数f(key)为哈希(Hash) 函数。</p>\r\n<blockquote>\r\n <p>读起来有些吃力，我们只需要抓住两点：哈希函数、哈希表，接下来我会介绍它们</p>\r\n</blockquote>\r\n<hr>\r\n<h2><a name=\"t5\"></a><a id=\"2_33\"></a>2、问题引用</h2>\r\n<p>前面讲过了，哈希表的出现可以解决数组的缺点，让我们从一个小案例来慢慢理解哈希表~</p>\r\n<p>假如周末到了，你要去图书馆借一本书《活着》，图书馆的管理员管理书籍很随意，是按照数组的方式来放书的，就像下图一样。而恰巧你要的《活着》是在最后一个位置，管理员从头开始找，你是不是要等好久好久？<br> <img src=\"https://img-blog.csdnimg.cn/4ccb71e1b154448d879154fbbd36c255.png\" alt=\"在这里插入图片描述\"><br> 最后你等的不耐烦了，就举报这个管理员，图书馆的老板把这个管理员给解雇了，来了一个新的管理员，她很聪明，她通过一种方式把每种书籍都编上一个号，并记录下来。你向她借《活着》，她通过<font color=\"#ff00\">\"一种方式\"</font>一计算，哦，是在下标为6的位置，就直接走过去，给你拿了过来。你很满意，老板也很满意，给她升职加薪~<br> <img src=\"https://img-blog.csdnimg.cn/ae41893c1c514882ad483af9af45a0f5.png\" alt=\"在这里插入图片描述\"></p>\r\n<hr>\r\n<h2><a name=\"t6\"></a><a id=\"3_42\"></a>3、哈希函数</h2>\r\n<p>上文说的<font color=\"#ff00\">\"一种方式\"</font>，就是哈希函数，它有三个很重要的性质：</p>\r\n<ul><li>当给哈希函数传入相同的输入值时，返回值一样</li><li>当给哈希函数传入不同的输入值时，返回值可能一样，也可能不一样，也就是我们所说的哈希碰撞</li><li>很多不同的输入值所得到的返回值会均匀的分布在输出域上，这一点很重要</li></ul>\r\n<hr>\r\n<h2><a name=\"t7\"></a><a id=\"4_51\"></a>4、哈希表结构</h2>\r\n<p>前面说了数组和哈希函数，就引出了我们的哈希表结构：<br> <img src=\"https://img-blog.csdnimg.cn/42d90b5a65d641e38e031dbdd587298d.png\" alt=\"在这里插入图片描述\"><br> 我们输入一个值，通过哈希函数计算后 % 上数组的长度，就可以让值放入数组中，所以当我们使用哈希表结构的时候，它的时间复杂度在理想状态下是O(1)，接下来给大家举例分析一下：</p>\r\n<hr>\r\n<h2><a name=\"t8\"></a><a id=\"5_57\"></a>5、举例分析</h2>\r\n<p><img src=\"https://img-blog.csdnimg.cn/9232ac6ee3dd4ae594595e95d0dccc45.png\" alt=\"在这里插入图片描述\"><br> 当我们输入<code>abc</code>时，由哈希函数计算得到一个哈希值10，10求%后得到1，就把<code>abc</code>放到数组下标为1的位置；然后输入<code>edg</code>，再次由哈希函数计算得到一个哈希值13,13求%后得到4，就把<code>edg</code>放到数组下标为4的位置，后面的操作也是这样。</p>\r\n<hr>\r\n<h2><a name=\"t9\"></a><a id=\"6_63\"></a>6、哈希冲突</h2>\r\n<p><font color=\"#ff00\">最后再来提一提哈希冲突：</font>当我们输入<code>future</code>时，假如通过哈希函数计算得到哈希值是15，我们就发现跟<code>love</code>的位置冲突了，解决这个方式有好几种，比如：<code>拉链法</code>、<code>再次哈希法</code>等等，这个我准备在写HashMap源码的时候，通过讲解HashMap的底层实现原理时，说一说Java的API的哈希表是什么样的时候再说。</p>\r\n<hr>\r\n<h2><a name=\"t10\"></a><a id=\"7_68\"></a>7、哈希表的优缺点</h2>\r\n<ul><li><code>优点：</code>处理元素很快，添加、删除、修改、查找元素性能好</li><li><code>缺点：</code>元素在数组中是无序的，不能重复</li></ul>\r\n<p>最后，讲解了哈希表的数据结构，那么力扣第一题你会了吗？</p>\r\n<pre class=\"prettyprint\"><code class=\"prism language-java has-numbering\" onclick=\"mdcp.signin(event)\" style=\"position: unset;\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{<!-- --></span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\r\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n        HashMap<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Integer<span class=\"token punctuation\">,</span> Integer<span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span>\r\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{<!-- --></span><span class=\"token comment\">//如果为true，说明target-num[i-1]的值在数组中存在</span>\r\n                arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\r\n                <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span>\r\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//这条语句不能放到if语句的前面！</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n<div class=\"hljs-button signin\" data-title=\"登录后复制\" data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.4334&quot;}\"></div></code><ul class=\"pre-numbering\" style=\"\"><li style=\"color: rgb(153, 153, 153);\">1</li><li style=\"color: rgb(153, 153, 153);\">2</li><li style=\"color: rgb(153, 153, 153);\">3</li><li style=\"color: rgb(153, 153, 153);\">4</li><li style=\"color: rgb(153, 153, 153);\">5</li><li style=\"color: rgb(153, 153, 153);\">6</li><li style=\"color: rgb(153, 153, 153);\">7</li><li style=\"color: rgb(153, 153, 153);\">8</li><li style=\"color: rgb(153, 153, 153);\">9</li><li style=\"color: rgb(153, 153, 153);\">10</li><li style=\"color: rgb(153, 153, 153);\">11</li><li style=\"color: rgb(153, 153, 153);\">12</li><li style=\"color: rgb(153, 153, 153);\">13</li><li style=\"color: rgb(153, 153, 153);\">14</li><li style=\"color: rgb(153, 153, 153);\">15</li></ul></pre>\r\n<hr>\r\n<p><code>感谢阅读，一起进步，嘻嘻~</code></p>\r\n                </div>\r\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/editerView/markdown_views-3fd7f7a902.css\" rel=\"stylesheet\">\r\n                <link href=\"https://csdnimg.cn/release/blogv2/dist/mdeditor/css/style-49037e4d27.css\" rel=\"stylesheet\">\r\n        </div>\r\n        <div id=\"treeSkill\" data-report-view=\"{&quot;spm&quot;:&quot;1001.2101.3001.6866&quot;}\" style=\"display: block;\"><div class=\"skill-tree-box\"><div class=\"skill-tree-head\">文章知识点与官方知识档案匹配，可进一步学习相关知识</div><div class=\"skill-tree-body\"><div class=\"skill-tree-item\"><span class=\"skill-tree-href\"><a data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.6866&quot;,&quot;dest&quot;:&quot;https://edu.csdn.net/skill/algorithm/algorithm-cbdd961fd6b9430c9d3750a9d9659cdb&quot;}\" href=\"https://edu.csdn.net/skill/algorithm/algorithm-cbdd961fd6b9430c9d3750a9d9659cdb\" target=\"_blank\">算法技能树</a><i></i><a data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.6866&quot;,&quot;dest&quot;:&quot;https://edu.csdn.net/skill/algorithm/algorithm-cbdd961fd6b9430c9d3750a9d9659cdb&quot;}\" href=\"https://edu.csdn.net/skill/algorithm/algorithm-cbdd961fd6b9430c9d3750a9d9659cdb\" target=\"_blank\">leetcode-哈希表</a><i></i><a data-report-click=\"{&quot;spm&quot;:&quot;1001.2101.3001.6866&quot;,&quot;dest&quot;:&quot;https://edu.csdn.net/skill/algorithm/algorithm-cbdd961fd6b9430c9d3750a9d9659cdb&quot;}\" href=\"https://edu.csdn.net/skill/algorithm/algorithm-cbdd961fd6b9430c9d3750a9d9659cdb\" target=\"_blank\">30-串联所有单词的子串</a></span><span class=\"skill-tree-con\"><span class=\"skill-tree-count\">7405</span> 人正在系统学习中</span></div></div></div></div>\r\n    </article>', '2022-06-06 20:12:56');

-- ----------------------------
-- Table structure for cms_category
-- ----------------------------
DROP TABLE IF EXISTS `cms_category`;
CREATE TABLE `cms_category`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '名称',
  `sort` int(11) NOT NULL DEFAULT 0 COMMENT '排序',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of cms_category
-- ----------------------------
INSERT INTO `cms_category` VALUES (1, '生活', 0);
INSERT INTO `cms_category` VALUES (2, '算法', 1);
INSERT INTO `cms_category` VALUES (3, '编程', 2);
INSERT INTO `cms_category` VALUES (4, 'Python', 3);

-- ----------------------------
-- Table structure for cms_comment
-- ----------------------------
DROP TABLE IF EXISTS `cms_comment`;
CREATE TABLE `cms_comment`  (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) NOT NULL COMMENT '用户id',
  `article_id` int(11) NOT NULL COMMENT '文章id',
  `content` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '内容',
  `create_at` int(15) NULL DEFAULT NULL COMMENT '评论时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = MyISAM AUTO_INCREMENT = 73 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of cms_comment
-- ----------------------------
INSERT INTO `cms_comment` VALUES (72, 8, 12, 'fghjk', 1655022597);
INSERT INTO `cms_comment` VALUES (63, 15, 12, '78ytynhgfd', 1654817123);
INSERT INTO `cms_comment` VALUES (41, 8, 5, 'wqsdfgg', 1654593130);
INSERT INTO `cms_comment` VALUES (62, 10, 12, '88888', 1654779462);
INSERT INTO `cms_comment` VALUES (43, 14, 5, 'wqsdfgg', 1654593131);
INSERT INTO `cms_comment` VALUES (44, 8, 5, 'wqsdfgg', 1654593131);
INSERT INTO `cms_comment` VALUES (61, 10, 2, '666666', 1654779452);
INSERT INTO `cms_comment` VALUES (47, 13, 5, '123re', 1654593394);
INSERT INTO `cms_comment` VALUES (51, 8, 11, 'sdfg', 1654593729);
INSERT INTO `cms_comment` VALUES (58, 13, 12, '7777', 1654610027);
INSERT INTO `cms_comment` VALUES (60, 15, 12, 'adsfdfds', 1654738494);

-- ----------------------------
-- Table structure for cms_user
-- ----------------------------
DROP TABLE IF EXISTS `cms_user`;
CREATE TABLE `cms_user`  (
  `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT,
  `username` varchar(111) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '用户名',
  `password` char(120) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '密码',
  `salt` char(111) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '密码salt',
  `power` int(255) NULL DEFAULT 0,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `username`(`username`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 15 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of cms_user
-- ----------------------------
INSERT INTO `cms_user` VALUES (1, 'admin', 'feddbf1b144d0ac8b34604db019d5a50', 'salt', 1);
INSERT INTO `cms_user` VALUES (8, 'test1', 'feddbf1b144d0ac8b34604db019d5a50', 'salt', 0);
INSERT INTO `cms_user` VALUES (11, '123456', 'feddbf1b144d0ac8b34604db019d5a50', 'salt', 0);
INSERT INTO `cms_user` VALUES (12, '1111', 'feddbf1b144d0ac8b34604db019d5a50', 'salt', 1);
INSERT INTO `cms_user` VALUES (13, 'qwe1', 'feddbf1b144d0ac8b34604db019d5a50', 'salt', 0);
INSERT INTO `cms_user` VALUES (14, 'qwe2', 'feddbf1b144d0ac8b34604db019d5a50', 'salt', 0);

SET FOREIGN_KEY_CHECKS = 1;
